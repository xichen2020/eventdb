// Copyright (c) 2019 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/xichen2020/eventdb/values/iterator (interfaces: ForwardBoolIterator,ForwardIntIterator,ForwardDoubleIterator,ForwardStringIterator,ForwardTimeIterator,SeekableBoolIterator,SeekableIntIterator,SeekableDoubleIterator,SeekableStringIterator,SeekableTimeIterator,PositionIterator)

package iterator

import (
	"github.com/golang/mock/gomock"
)

// Mock of ForwardBoolIterator interface
type MockForwardBoolIterator struct {
	ctrl     *gomock.Controller
	recorder *_MockForwardBoolIteratorRecorder
}

// Recorder for MockForwardBoolIterator (not exported)
type _MockForwardBoolIteratorRecorder struct {
	mock *MockForwardBoolIterator
}

func NewMockForwardBoolIterator(ctrl *gomock.Controller) *MockForwardBoolIterator {
	mock := &MockForwardBoolIterator{ctrl: ctrl}
	mock.recorder = &_MockForwardBoolIteratorRecorder{mock}
	return mock
}

func (_m *MockForwardBoolIterator) EXPECT() *_MockForwardBoolIteratorRecorder {
	return _m.recorder
}

func (_m *MockForwardBoolIterator) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockForwardBoolIteratorRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockForwardBoolIterator) Current() bool {
	ret := _m.ctrl.Call(_m, "Current")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockForwardBoolIteratorRecorder) Current() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Current")
}

func (_m *MockForwardBoolIterator) Err() error {
	ret := _m.ctrl.Call(_m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockForwardBoolIteratorRecorder) Err() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Err")
}

func (_m *MockForwardBoolIterator) Next() bool {
	ret := _m.ctrl.Call(_m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockForwardBoolIteratorRecorder) Next() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next")
}

// Mock of ForwardIntIterator interface
type MockForwardIntIterator struct {
	ctrl     *gomock.Controller
	recorder *_MockForwardIntIteratorRecorder
}

// Recorder for MockForwardIntIterator (not exported)
type _MockForwardIntIteratorRecorder struct {
	mock *MockForwardIntIterator
}

func NewMockForwardIntIterator(ctrl *gomock.Controller) *MockForwardIntIterator {
	mock := &MockForwardIntIterator{ctrl: ctrl}
	mock.recorder = &_MockForwardIntIteratorRecorder{mock}
	return mock
}

func (_m *MockForwardIntIterator) EXPECT() *_MockForwardIntIteratorRecorder {
	return _m.recorder
}

func (_m *MockForwardIntIterator) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockForwardIntIteratorRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockForwardIntIterator) Current() int {
	ret := _m.ctrl.Call(_m, "Current")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockForwardIntIteratorRecorder) Current() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Current")
}

func (_m *MockForwardIntIterator) Err() error {
	ret := _m.ctrl.Call(_m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockForwardIntIteratorRecorder) Err() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Err")
}

func (_m *MockForwardIntIterator) Next() bool {
	ret := _m.ctrl.Call(_m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockForwardIntIteratorRecorder) Next() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next")
}

// Mock of ForwardDoubleIterator interface
type MockForwardDoubleIterator struct {
	ctrl     *gomock.Controller
	recorder *_MockForwardDoubleIteratorRecorder
}

// Recorder for MockForwardDoubleIterator (not exported)
type _MockForwardDoubleIteratorRecorder struct {
	mock *MockForwardDoubleIterator
}

func NewMockForwardDoubleIterator(ctrl *gomock.Controller) *MockForwardDoubleIterator {
	mock := &MockForwardDoubleIterator{ctrl: ctrl}
	mock.recorder = &_MockForwardDoubleIteratorRecorder{mock}
	return mock
}

func (_m *MockForwardDoubleIterator) EXPECT() *_MockForwardDoubleIteratorRecorder {
	return _m.recorder
}

func (_m *MockForwardDoubleIterator) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockForwardDoubleIteratorRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockForwardDoubleIterator) Current() float64 {
	ret := _m.ctrl.Call(_m, "Current")
	ret0, _ := ret[0].(float64)
	return ret0
}

func (_mr *_MockForwardDoubleIteratorRecorder) Current() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Current")
}

func (_m *MockForwardDoubleIterator) Err() error {
	ret := _m.ctrl.Call(_m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockForwardDoubleIteratorRecorder) Err() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Err")
}

func (_m *MockForwardDoubleIterator) Next() bool {
	ret := _m.ctrl.Call(_m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockForwardDoubleIteratorRecorder) Next() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next")
}

// Mock of ForwardStringIterator interface
type MockForwardStringIterator struct {
	ctrl     *gomock.Controller
	recorder *_MockForwardStringIteratorRecorder
}

// Recorder for MockForwardStringIterator (not exported)
type _MockForwardStringIteratorRecorder struct {
	mock *MockForwardStringIterator
}

func NewMockForwardStringIterator(ctrl *gomock.Controller) *MockForwardStringIterator {
	mock := &MockForwardStringIterator{ctrl: ctrl}
	mock.recorder = &_MockForwardStringIteratorRecorder{mock}
	return mock
}

func (_m *MockForwardStringIterator) EXPECT() *_MockForwardStringIteratorRecorder {
	return _m.recorder
}

func (_m *MockForwardStringIterator) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockForwardStringIteratorRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockForwardStringIterator) Current() string {
	ret := _m.ctrl.Call(_m, "Current")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockForwardStringIteratorRecorder) Current() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Current")
}

func (_m *MockForwardStringIterator) Err() error {
	ret := _m.ctrl.Call(_m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockForwardStringIteratorRecorder) Err() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Err")
}

func (_m *MockForwardStringIterator) Next() bool {
	ret := _m.ctrl.Call(_m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockForwardStringIteratorRecorder) Next() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next")
}

// Mock of ForwardTimeIterator interface
type MockForwardTimeIterator struct {
	ctrl     *gomock.Controller
	recorder *_MockForwardTimeIteratorRecorder
}

// Recorder for MockForwardTimeIterator (not exported)
type _MockForwardTimeIteratorRecorder struct {
	mock *MockForwardTimeIterator
}

func NewMockForwardTimeIterator(ctrl *gomock.Controller) *MockForwardTimeIterator {
	mock := &MockForwardTimeIterator{ctrl: ctrl}
	mock.recorder = &_MockForwardTimeIteratorRecorder{mock}
	return mock
}

func (_m *MockForwardTimeIterator) EXPECT() *_MockForwardTimeIteratorRecorder {
	return _m.recorder
}

func (_m *MockForwardTimeIterator) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockForwardTimeIteratorRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockForwardTimeIterator) Current() int64 {
	ret := _m.ctrl.Call(_m, "Current")
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockForwardTimeIteratorRecorder) Current() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Current")
}

func (_m *MockForwardTimeIterator) Err() error {
	ret := _m.ctrl.Call(_m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockForwardTimeIteratorRecorder) Err() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Err")
}

func (_m *MockForwardTimeIterator) Next() bool {
	ret := _m.ctrl.Call(_m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockForwardTimeIteratorRecorder) Next() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next")
}

// Mock of SeekableBoolIterator interface
type MockSeekableBoolIterator struct {
	ctrl     *gomock.Controller
	recorder *_MockSeekableBoolIteratorRecorder
}

// Recorder for MockSeekableBoolIterator (not exported)
type _MockSeekableBoolIteratorRecorder struct {
	mock *MockSeekableBoolIterator
}

func NewMockSeekableBoolIterator(ctrl *gomock.Controller) *MockSeekableBoolIterator {
	mock := &MockSeekableBoolIterator{ctrl: ctrl}
	mock.recorder = &_MockSeekableBoolIteratorRecorder{mock}
	return mock
}

func (_m *MockSeekableBoolIterator) EXPECT() *_MockSeekableBoolIteratorRecorder {
	return _m.recorder
}

func (_m *MockSeekableBoolIterator) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockSeekableBoolIteratorRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockSeekableBoolIterator) Current() bool {
	ret := _m.ctrl.Call(_m, "Current")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockSeekableBoolIteratorRecorder) Current() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Current")
}

func (_m *MockSeekableBoolIterator) Err() error {
	ret := _m.ctrl.Call(_m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSeekableBoolIteratorRecorder) Err() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Err")
}

func (_m *MockSeekableBoolIterator) Next() bool {
	ret := _m.ctrl.Call(_m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockSeekableBoolIteratorRecorder) Next() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next")
}

func (_m *MockSeekableBoolIterator) SeekForward(_param0 int) error {
	ret := _m.ctrl.Call(_m, "SeekForward", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSeekableBoolIteratorRecorder) SeekForward(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SeekForward", arg0)
}

// Mock of SeekableIntIterator interface
type MockSeekableIntIterator struct {
	ctrl     *gomock.Controller
	recorder *_MockSeekableIntIteratorRecorder
}

// Recorder for MockSeekableIntIterator (not exported)
type _MockSeekableIntIteratorRecorder struct {
	mock *MockSeekableIntIterator
}

func NewMockSeekableIntIterator(ctrl *gomock.Controller) *MockSeekableIntIterator {
	mock := &MockSeekableIntIterator{ctrl: ctrl}
	mock.recorder = &_MockSeekableIntIteratorRecorder{mock}
	return mock
}

func (_m *MockSeekableIntIterator) EXPECT() *_MockSeekableIntIteratorRecorder {
	return _m.recorder
}

func (_m *MockSeekableIntIterator) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockSeekableIntIteratorRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockSeekableIntIterator) Current() int {
	ret := _m.ctrl.Call(_m, "Current")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockSeekableIntIteratorRecorder) Current() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Current")
}

func (_m *MockSeekableIntIterator) Err() error {
	ret := _m.ctrl.Call(_m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSeekableIntIteratorRecorder) Err() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Err")
}

func (_m *MockSeekableIntIterator) Next() bool {
	ret := _m.ctrl.Call(_m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockSeekableIntIteratorRecorder) Next() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next")
}

func (_m *MockSeekableIntIterator) SeekForward(_param0 int) error {
	ret := _m.ctrl.Call(_m, "SeekForward", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSeekableIntIteratorRecorder) SeekForward(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SeekForward", arg0)
}

// Mock of SeekableDoubleIterator interface
type MockSeekableDoubleIterator struct {
	ctrl     *gomock.Controller
	recorder *_MockSeekableDoubleIteratorRecorder
}

// Recorder for MockSeekableDoubleIterator (not exported)
type _MockSeekableDoubleIteratorRecorder struct {
	mock *MockSeekableDoubleIterator
}

func NewMockSeekableDoubleIterator(ctrl *gomock.Controller) *MockSeekableDoubleIterator {
	mock := &MockSeekableDoubleIterator{ctrl: ctrl}
	mock.recorder = &_MockSeekableDoubleIteratorRecorder{mock}
	return mock
}

func (_m *MockSeekableDoubleIterator) EXPECT() *_MockSeekableDoubleIteratorRecorder {
	return _m.recorder
}

func (_m *MockSeekableDoubleIterator) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockSeekableDoubleIteratorRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockSeekableDoubleIterator) Current() float64 {
	ret := _m.ctrl.Call(_m, "Current")
	ret0, _ := ret[0].(float64)
	return ret0
}

func (_mr *_MockSeekableDoubleIteratorRecorder) Current() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Current")
}

func (_m *MockSeekableDoubleIterator) Err() error {
	ret := _m.ctrl.Call(_m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSeekableDoubleIteratorRecorder) Err() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Err")
}

func (_m *MockSeekableDoubleIterator) Next() bool {
	ret := _m.ctrl.Call(_m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockSeekableDoubleIteratorRecorder) Next() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next")
}

func (_m *MockSeekableDoubleIterator) SeekForward(_param0 int) error {
	ret := _m.ctrl.Call(_m, "SeekForward", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSeekableDoubleIteratorRecorder) SeekForward(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SeekForward", arg0)
}

// Mock of SeekableStringIterator interface
type MockSeekableStringIterator struct {
	ctrl     *gomock.Controller
	recorder *_MockSeekableStringIteratorRecorder
}

// Recorder for MockSeekableStringIterator (not exported)
type _MockSeekableStringIteratorRecorder struct {
	mock *MockSeekableStringIterator
}

func NewMockSeekableStringIterator(ctrl *gomock.Controller) *MockSeekableStringIterator {
	mock := &MockSeekableStringIterator{ctrl: ctrl}
	mock.recorder = &_MockSeekableStringIteratorRecorder{mock}
	return mock
}

func (_m *MockSeekableStringIterator) EXPECT() *_MockSeekableStringIteratorRecorder {
	return _m.recorder
}

func (_m *MockSeekableStringIterator) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockSeekableStringIteratorRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockSeekableStringIterator) Current() string {
	ret := _m.ctrl.Call(_m, "Current")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockSeekableStringIteratorRecorder) Current() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Current")
}

func (_m *MockSeekableStringIterator) Err() error {
	ret := _m.ctrl.Call(_m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSeekableStringIteratorRecorder) Err() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Err")
}

func (_m *MockSeekableStringIterator) Next() bool {
	ret := _m.ctrl.Call(_m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockSeekableStringIteratorRecorder) Next() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next")
}

func (_m *MockSeekableStringIterator) SeekForward(_param0 int) error {
	ret := _m.ctrl.Call(_m, "SeekForward", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSeekableStringIteratorRecorder) SeekForward(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SeekForward", arg0)
}

// Mock of SeekableTimeIterator interface
type MockSeekableTimeIterator struct {
	ctrl     *gomock.Controller
	recorder *_MockSeekableTimeIteratorRecorder
}

// Recorder for MockSeekableTimeIterator (not exported)
type _MockSeekableTimeIteratorRecorder struct {
	mock *MockSeekableTimeIterator
}

func NewMockSeekableTimeIterator(ctrl *gomock.Controller) *MockSeekableTimeIterator {
	mock := &MockSeekableTimeIterator{ctrl: ctrl}
	mock.recorder = &_MockSeekableTimeIteratorRecorder{mock}
	return mock
}

func (_m *MockSeekableTimeIterator) EXPECT() *_MockSeekableTimeIteratorRecorder {
	return _m.recorder
}

func (_m *MockSeekableTimeIterator) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockSeekableTimeIteratorRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockSeekableTimeIterator) Current() int64 {
	ret := _m.ctrl.Call(_m, "Current")
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockSeekableTimeIteratorRecorder) Current() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Current")
}

func (_m *MockSeekableTimeIterator) Err() error {
	ret := _m.ctrl.Call(_m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSeekableTimeIteratorRecorder) Err() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Err")
}

func (_m *MockSeekableTimeIterator) Next() bool {
	ret := _m.ctrl.Call(_m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockSeekableTimeIteratorRecorder) Next() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next")
}

func (_m *MockSeekableTimeIterator) SeekForward(_param0 int) error {
	ret := _m.ctrl.Call(_m, "SeekForward", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSeekableTimeIteratorRecorder) SeekForward(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SeekForward", arg0)
}

// Mock of PositionIterator interface
type MockPositionIterator struct {
	ctrl     *gomock.Controller
	recorder *_MockPositionIteratorRecorder
}

// Recorder for MockPositionIterator (not exported)
type _MockPositionIteratorRecorder struct {
	mock *MockPositionIterator
}

func NewMockPositionIterator(ctrl *gomock.Controller) *MockPositionIterator {
	mock := &MockPositionIterator{ctrl: ctrl}
	mock.recorder = &_MockPositionIteratorRecorder{mock}
	return mock
}

func (_m *MockPositionIterator) EXPECT() *_MockPositionIteratorRecorder {
	return _m.recorder
}

func (_m *MockPositionIterator) Next() bool {
	ret := _m.ctrl.Call(_m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockPositionIteratorRecorder) Next() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next")
}

func (_m *MockPositionIterator) Position() int {
	ret := _m.ctrl.Call(_m, "Position")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockPositionIteratorRecorder) Position() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Position")
}
