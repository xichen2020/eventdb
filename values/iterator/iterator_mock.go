// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xichen2020/eventdb/values/iterator (interfaces: ForwardBoolIterator,ForwardIntIterator,ForwardDoubleIterator,ForwardStringIterator,ForwardTimeIterator,SeekableBoolIterator,SeekableIntIterator,SeekableDoubleIterator,SeekableStringIterator,SeekableTimeIterator,PositionIterator)

// Package iterator is a generated GoMock package.
package iterator

import (
	"reflect"

	"github.com/golang/mock/gomock"
)

// MockForwardBoolIterator is a mock of ForwardBoolIterator interface
type MockForwardBoolIterator struct {
	ctrl     *gomock.Controller
	recorder *MockForwardBoolIteratorMockRecorder
}

// MockForwardBoolIteratorMockRecorder is the mock recorder for MockForwardBoolIterator
type MockForwardBoolIteratorMockRecorder struct {
	mock *MockForwardBoolIterator
}

// NewMockForwardBoolIterator creates a new mock instance
func NewMockForwardBoolIterator(ctrl *gomock.Controller) *MockForwardBoolIterator {
	mock := &MockForwardBoolIterator{ctrl: ctrl}
	mock.recorder = &MockForwardBoolIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockForwardBoolIterator) EXPECT() *MockForwardBoolIteratorMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockForwardBoolIterator) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockForwardBoolIteratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockForwardBoolIterator)(nil).Close))
}

// Current mocks base method
func (m *MockForwardBoolIterator) Current() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Current")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Current indicates an expected call of Current
func (mr *MockForwardBoolIteratorMockRecorder) Current() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*MockForwardBoolIterator)(nil).Current))
}

// Err mocks base method
func (m *MockForwardBoolIterator) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockForwardBoolIteratorMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockForwardBoolIterator)(nil).Err))
}

// Next mocks base method
func (m *MockForwardBoolIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockForwardBoolIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockForwardBoolIterator)(nil).Next))
}

// MockForwardIntIterator is a mock of ForwardIntIterator interface
type MockForwardIntIterator struct {
	ctrl     *gomock.Controller
	recorder *MockForwardIntIteratorMockRecorder
}

// MockForwardIntIteratorMockRecorder is the mock recorder for MockForwardIntIterator
type MockForwardIntIteratorMockRecorder struct {
	mock *MockForwardIntIterator
}

// NewMockForwardIntIterator creates a new mock instance
func NewMockForwardIntIterator(ctrl *gomock.Controller) *MockForwardIntIterator {
	mock := &MockForwardIntIterator{ctrl: ctrl}
	mock.recorder = &MockForwardIntIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockForwardIntIterator) EXPECT() *MockForwardIntIteratorMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockForwardIntIterator) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockForwardIntIteratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockForwardIntIterator)(nil).Close))
}

// Current mocks base method
func (m *MockForwardIntIterator) Current() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Current")
	ret0, _ := ret[0].(int)
	return ret0
}

// Current indicates an expected call of Current
func (mr *MockForwardIntIteratorMockRecorder) Current() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*MockForwardIntIterator)(nil).Current))
}

// Err mocks base method
func (m *MockForwardIntIterator) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockForwardIntIteratorMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockForwardIntIterator)(nil).Err))
}

// Next mocks base method
func (m *MockForwardIntIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockForwardIntIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockForwardIntIterator)(nil).Next))
}

// MockForwardDoubleIterator is a mock of ForwardDoubleIterator interface
type MockForwardDoubleIterator struct {
	ctrl     *gomock.Controller
	recorder *MockForwardDoubleIteratorMockRecorder
}

// MockForwardDoubleIteratorMockRecorder is the mock recorder for MockForwardDoubleIterator
type MockForwardDoubleIteratorMockRecorder struct {
	mock *MockForwardDoubleIterator
}

// NewMockForwardDoubleIterator creates a new mock instance
func NewMockForwardDoubleIterator(ctrl *gomock.Controller) *MockForwardDoubleIterator {
	mock := &MockForwardDoubleIterator{ctrl: ctrl}
	mock.recorder = &MockForwardDoubleIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockForwardDoubleIterator) EXPECT() *MockForwardDoubleIteratorMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockForwardDoubleIterator) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockForwardDoubleIteratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockForwardDoubleIterator)(nil).Close))
}

// Current mocks base method
func (m *MockForwardDoubleIterator) Current() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Current")
	ret0, _ := ret[0].(float64)
	return ret0
}

// Current indicates an expected call of Current
func (mr *MockForwardDoubleIteratorMockRecorder) Current() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*MockForwardDoubleIterator)(nil).Current))
}

// Err mocks base method
func (m *MockForwardDoubleIterator) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockForwardDoubleIteratorMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockForwardDoubleIterator)(nil).Err))
}

// Next mocks base method
func (m *MockForwardDoubleIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockForwardDoubleIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockForwardDoubleIterator)(nil).Next))
}

// MockForwardStringIterator is a mock of ForwardStringIterator interface
type MockForwardStringIterator struct {
	ctrl     *gomock.Controller
	recorder *MockForwardStringIteratorMockRecorder
}

// MockForwardStringIteratorMockRecorder is the mock recorder for MockForwardStringIterator
type MockForwardStringIteratorMockRecorder struct {
	mock *MockForwardStringIterator
}

// NewMockForwardStringIterator creates a new mock instance
func NewMockForwardStringIterator(ctrl *gomock.Controller) *MockForwardStringIterator {
	mock := &MockForwardStringIterator{ctrl: ctrl}
	mock.recorder = &MockForwardStringIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockForwardStringIterator) EXPECT() *MockForwardStringIteratorMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockForwardStringIterator) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockForwardStringIteratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockForwardStringIterator)(nil).Close))
}

// Current mocks base method
func (m *MockForwardStringIterator) Current() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Current")
	ret0, _ := ret[0].(string)
	return ret0
}

// Current indicates an expected call of Current
func (mr *MockForwardStringIteratorMockRecorder) Current() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*MockForwardStringIterator)(nil).Current))
}

// Err mocks base method
func (m *MockForwardStringIterator) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockForwardStringIteratorMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockForwardStringIterator)(nil).Err))
}

// Next mocks base method
func (m *MockForwardStringIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockForwardStringIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockForwardStringIterator)(nil).Next))
}

// MockForwardTimeIterator is a mock of ForwardTimeIterator interface
type MockForwardTimeIterator struct {
	ctrl     *gomock.Controller
	recorder *MockForwardTimeIteratorMockRecorder
}

// MockForwardTimeIteratorMockRecorder is the mock recorder for MockForwardTimeIterator
type MockForwardTimeIteratorMockRecorder struct {
	mock *MockForwardTimeIterator
}

// NewMockForwardTimeIterator creates a new mock instance
func NewMockForwardTimeIterator(ctrl *gomock.Controller) *MockForwardTimeIterator {
	mock := &MockForwardTimeIterator{ctrl: ctrl}
	mock.recorder = &MockForwardTimeIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockForwardTimeIterator) EXPECT() *MockForwardTimeIteratorMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockForwardTimeIterator) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockForwardTimeIteratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockForwardTimeIterator)(nil).Close))
}

// Current mocks base method
func (m *MockForwardTimeIterator) Current() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Current")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Current indicates an expected call of Current
func (mr *MockForwardTimeIteratorMockRecorder) Current() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*MockForwardTimeIterator)(nil).Current))
}

// Err mocks base method
func (m *MockForwardTimeIterator) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockForwardTimeIteratorMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockForwardTimeIterator)(nil).Err))
}

// Next mocks base method
func (m *MockForwardTimeIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockForwardTimeIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockForwardTimeIterator)(nil).Next))
}

// MockSeekableBoolIterator is a mock of SeekableBoolIterator interface
type MockSeekableBoolIterator struct {
	ctrl     *gomock.Controller
	recorder *MockSeekableBoolIteratorMockRecorder
}

// MockSeekableBoolIteratorMockRecorder is the mock recorder for MockSeekableBoolIterator
type MockSeekableBoolIteratorMockRecorder struct {
	mock *MockSeekableBoolIterator
}

// NewMockSeekableBoolIterator creates a new mock instance
func NewMockSeekableBoolIterator(ctrl *gomock.Controller) *MockSeekableBoolIterator {
	mock := &MockSeekableBoolIterator{ctrl: ctrl}
	mock.recorder = &MockSeekableBoolIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSeekableBoolIterator) EXPECT() *MockSeekableBoolIteratorMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockSeekableBoolIterator) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockSeekableBoolIteratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSeekableBoolIterator)(nil).Close))
}

// Current mocks base method
func (m *MockSeekableBoolIterator) Current() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Current")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Current indicates an expected call of Current
func (mr *MockSeekableBoolIteratorMockRecorder) Current() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*MockSeekableBoolIterator)(nil).Current))
}

// Err mocks base method
func (m *MockSeekableBoolIterator) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockSeekableBoolIteratorMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockSeekableBoolIterator)(nil).Err))
}

// Next mocks base method
func (m *MockSeekableBoolIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockSeekableBoolIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockSeekableBoolIterator)(nil).Next))
}

// SeekForward mocks base method
func (m *MockSeekableBoolIterator) SeekForward(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SeekForward", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SeekForward indicates an expected call of SeekForward
func (mr *MockSeekableBoolIteratorMockRecorder) SeekForward(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeekForward", reflect.TypeOf((*MockSeekableBoolIterator)(nil).SeekForward), arg0)
}

// MockSeekableIntIterator is a mock of SeekableIntIterator interface
type MockSeekableIntIterator struct {
	ctrl     *gomock.Controller
	recorder *MockSeekableIntIteratorMockRecorder
}

// MockSeekableIntIteratorMockRecorder is the mock recorder for MockSeekableIntIterator
type MockSeekableIntIteratorMockRecorder struct {
	mock *MockSeekableIntIterator
}

// NewMockSeekableIntIterator creates a new mock instance
func NewMockSeekableIntIterator(ctrl *gomock.Controller) *MockSeekableIntIterator {
	mock := &MockSeekableIntIterator{ctrl: ctrl}
	mock.recorder = &MockSeekableIntIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSeekableIntIterator) EXPECT() *MockSeekableIntIteratorMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockSeekableIntIterator) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockSeekableIntIteratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSeekableIntIterator)(nil).Close))
}

// Current mocks base method
func (m *MockSeekableIntIterator) Current() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Current")
	ret0, _ := ret[0].(int)
	return ret0
}

// Current indicates an expected call of Current
func (mr *MockSeekableIntIteratorMockRecorder) Current() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*MockSeekableIntIterator)(nil).Current))
}

// Err mocks base method
func (m *MockSeekableIntIterator) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockSeekableIntIteratorMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockSeekableIntIterator)(nil).Err))
}

// Next mocks base method
func (m *MockSeekableIntIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockSeekableIntIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockSeekableIntIterator)(nil).Next))
}

// SeekForward mocks base method
func (m *MockSeekableIntIterator) SeekForward(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SeekForward", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SeekForward indicates an expected call of SeekForward
func (mr *MockSeekableIntIteratorMockRecorder) SeekForward(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeekForward", reflect.TypeOf((*MockSeekableIntIterator)(nil).SeekForward), arg0)
}

// MockSeekableDoubleIterator is a mock of SeekableDoubleIterator interface
type MockSeekableDoubleIterator struct {
	ctrl     *gomock.Controller
	recorder *MockSeekableDoubleIteratorMockRecorder
}

// MockSeekableDoubleIteratorMockRecorder is the mock recorder for MockSeekableDoubleIterator
type MockSeekableDoubleIteratorMockRecorder struct {
	mock *MockSeekableDoubleIterator
}

// NewMockSeekableDoubleIterator creates a new mock instance
func NewMockSeekableDoubleIterator(ctrl *gomock.Controller) *MockSeekableDoubleIterator {
	mock := &MockSeekableDoubleIterator{ctrl: ctrl}
	mock.recorder = &MockSeekableDoubleIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSeekableDoubleIterator) EXPECT() *MockSeekableDoubleIteratorMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockSeekableDoubleIterator) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockSeekableDoubleIteratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSeekableDoubleIterator)(nil).Close))
}

// Current mocks base method
func (m *MockSeekableDoubleIterator) Current() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Current")
	ret0, _ := ret[0].(float64)
	return ret0
}

// Current indicates an expected call of Current
func (mr *MockSeekableDoubleIteratorMockRecorder) Current() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*MockSeekableDoubleIterator)(nil).Current))
}

// Err mocks base method
func (m *MockSeekableDoubleIterator) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockSeekableDoubleIteratorMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockSeekableDoubleIterator)(nil).Err))
}

// Next mocks base method
func (m *MockSeekableDoubleIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockSeekableDoubleIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockSeekableDoubleIterator)(nil).Next))
}

// SeekForward mocks base method
func (m *MockSeekableDoubleIterator) SeekForward(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SeekForward", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SeekForward indicates an expected call of SeekForward
func (mr *MockSeekableDoubleIteratorMockRecorder) SeekForward(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeekForward", reflect.TypeOf((*MockSeekableDoubleIterator)(nil).SeekForward), arg0)
}

// MockSeekableStringIterator is a mock of SeekableStringIterator interface
type MockSeekableStringIterator struct {
	ctrl     *gomock.Controller
	recorder *MockSeekableStringIteratorMockRecorder
}

// MockSeekableStringIteratorMockRecorder is the mock recorder for MockSeekableStringIterator
type MockSeekableStringIteratorMockRecorder struct {
	mock *MockSeekableStringIterator
}

// NewMockSeekableStringIterator creates a new mock instance
func NewMockSeekableStringIterator(ctrl *gomock.Controller) *MockSeekableStringIterator {
	mock := &MockSeekableStringIterator{ctrl: ctrl}
	mock.recorder = &MockSeekableStringIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSeekableStringIterator) EXPECT() *MockSeekableStringIteratorMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockSeekableStringIterator) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockSeekableStringIteratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSeekableStringIterator)(nil).Close))
}

// Current mocks base method
func (m *MockSeekableStringIterator) Current() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Current")
	ret0, _ := ret[0].(string)
	return ret0
}

// Current indicates an expected call of Current
func (mr *MockSeekableStringIteratorMockRecorder) Current() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*MockSeekableStringIterator)(nil).Current))
}

// Err mocks base method
func (m *MockSeekableStringIterator) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockSeekableStringIteratorMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockSeekableStringIterator)(nil).Err))
}

// Next mocks base method
func (m *MockSeekableStringIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockSeekableStringIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockSeekableStringIterator)(nil).Next))
}

// SeekForward mocks base method
func (m *MockSeekableStringIterator) SeekForward(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SeekForward", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SeekForward indicates an expected call of SeekForward
func (mr *MockSeekableStringIteratorMockRecorder) SeekForward(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeekForward", reflect.TypeOf((*MockSeekableStringIterator)(nil).SeekForward), arg0)
}

// MockSeekableTimeIterator is a mock of SeekableTimeIterator interface
type MockSeekableTimeIterator struct {
	ctrl     *gomock.Controller
	recorder *MockSeekableTimeIteratorMockRecorder
}

// MockSeekableTimeIteratorMockRecorder is the mock recorder for MockSeekableTimeIterator
type MockSeekableTimeIteratorMockRecorder struct {
	mock *MockSeekableTimeIterator
}

// NewMockSeekableTimeIterator creates a new mock instance
func NewMockSeekableTimeIterator(ctrl *gomock.Controller) *MockSeekableTimeIterator {
	mock := &MockSeekableTimeIterator{ctrl: ctrl}
	mock.recorder = &MockSeekableTimeIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSeekableTimeIterator) EXPECT() *MockSeekableTimeIteratorMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockSeekableTimeIterator) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockSeekableTimeIteratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSeekableTimeIterator)(nil).Close))
}

// Current mocks base method
func (m *MockSeekableTimeIterator) Current() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Current")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Current indicates an expected call of Current
func (mr *MockSeekableTimeIteratorMockRecorder) Current() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*MockSeekableTimeIterator)(nil).Current))
}

// Err mocks base method
func (m *MockSeekableTimeIterator) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockSeekableTimeIteratorMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockSeekableTimeIterator)(nil).Err))
}

// Next mocks base method
func (m *MockSeekableTimeIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockSeekableTimeIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockSeekableTimeIterator)(nil).Next))
}

// SeekForward mocks base method
func (m *MockSeekableTimeIterator) SeekForward(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SeekForward", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SeekForward indicates an expected call of SeekForward
func (mr *MockSeekableTimeIteratorMockRecorder) SeekForward(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeekForward", reflect.TypeOf((*MockSeekableTimeIterator)(nil).SeekForward), arg0)
}

// MockPositionIterator is a mock of PositionIterator interface
type MockPositionIterator struct {
	ctrl     *gomock.Controller
	recorder *MockPositionIteratorMockRecorder
}

// MockPositionIteratorMockRecorder is the mock recorder for MockPositionIterator
type MockPositionIteratorMockRecorder struct {
	mock *MockPositionIterator
}

// NewMockPositionIterator creates a new mock instance
func NewMockPositionIterator(ctrl *gomock.Controller) *MockPositionIterator {
	mock := &MockPositionIterator{ctrl: ctrl}
	mock.recorder = &MockPositionIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPositionIterator) EXPECT() *MockPositionIteratorMockRecorder {
	return m.recorder
}

// Err mocks base method
func (m *MockPositionIterator) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockPositionIteratorMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockPositionIterator)(nil).Err))
}

// Next mocks base method
func (m *MockPositionIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockPositionIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockPositionIterator)(nil).Next))
}

// Position mocks base method
func (m *MockPositionIterator) Position() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Position")
	ret0, _ := ret[0].(int)
	return ret0
}

// Position indicates an expected call of Position
func (mr *MockPositionIteratorMockRecorder) Position() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Position", reflect.TypeOf((*MockPositionIterator)(nil).Position))
}
