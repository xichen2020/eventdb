// Copyright (c) 2019 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/mauricelam/genny

package decoding

import (
	"encoding/binary"

	"errors"

	"io"

	xio "github.com/xichen2020/eventdb/x/io"
)

var (
	errNonPositiveNumberOfRepetitions = errors.New("non positive number of repetitions")
)

// readValueFn reads a value from reader.
type readValueFn func(reader xio.Reader) (bool, error)

// runLengthDecodeBool run length decodes a stream of Bools.
func runLengthDecodeBool(
	readValueFn readValueFn,
	reader xio.Reader,
) *runLengthBoolIterator {
	return newRunLengthBoolIterator(reader, readValueFn)
}

// runLengthBoolIterator iterates over a run length encoded stream of values.
type runLengthBoolIterator struct {
	reader      xio.Reader
	readValueFn readValueFn

	curr        bool
	repetitions int64
	err         error
}

// Next returns true if there are more values to be iterated over, and false otherwise.
func (it *runLengthBoolIterator) Next() bool {
	if it.err != nil {
		return false
	}

	if it.repetitions > 0 {
		it.repetitions--
		return true
	}

	it.repetitions, it.err = binary.ReadVarint(it.reader)
	if it.err != nil {
		return false
	}
	if it.repetitions < 1 {
		it.err = errNonPositiveNumberOfRepetitions
		return false
	}

	it.curr, it.err = it.readValueFn(it.reader)
	if it.err != nil {
		return false
	}
	it.repetitions--
	return true
}

// Current returns the current string.
func (it *runLengthBoolIterator) Current() bool { return it.curr }

// Err returns any error recorded while iterating.
// NB(xichen): This ignores `io.EOF`.
func (it *runLengthBoolIterator) Err() error {
	if it.err == io.EOF {
		return nil
	}
	return it.err
}

// Close the iterator.
func (it *runLengthBoolIterator) Close() {
	it.err = nil
	it.reader = nil
	it.readValueFn = nil
}

func newRunLengthBoolIterator(
	reader xio.Reader,
	readValueFn readValueFn,
) *runLengthBoolIterator {
	return &runLengthBoolIterator{
		reader:      reader,
		readValueFn: readValueFn,
	}
}
