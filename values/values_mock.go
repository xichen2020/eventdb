// Copyright (c) 2019 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/xichen2020/eventdb/values (interfaces: BoolValues,IntValues,DoubleValues,StringValues,TimeValues)

package values

import (
	"github.com/golang/mock/gomock"
	"github.com/xichen2020/eventdb/values/iterator"
)

// Mock of BoolValues interface
type MockBoolValues struct {
	ctrl     *gomock.Controller
	recorder *_MockBoolValuesRecorder
}

// Recorder for MockBoolValues (not exported)
type _MockBoolValuesRecorder struct {
	mock *MockBoolValues
}

func NewMockBoolValues(ctrl *gomock.Controller) *MockBoolValues {
	mock := &MockBoolValues{ctrl: ctrl}
	mock.recorder = &_MockBoolValuesRecorder{mock}
	return mock
}

func (_m *MockBoolValues) EXPECT() *_MockBoolValuesRecorder {
	return _m.recorder
}

func (_m *MockBoolValues) Iter() (iterator.ForwardBoolIterator, error) {
	ret := _m.ctrl.Call(_m, "Iter")
	ret0, _ := ret[0].(iterator.ForwardBoolIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBoolValuesRecorder) Iter() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Iter")
}

func (_m *MockBoolValues) Metadata() BoolValuesMetadata {
	ret := _m.ctrl.Call(_m, "Metadata")
	ret0, _ := ret[0].(BoolValuesMetadata)
	return ret0
}

func (_mr *_MockBoolValuesRecorder) Metadata() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Metadata")
}

// Mock of IntValues interface
type MockIntValues struct {
	ctrl     *gomock.Controller
	recorder *_MockIntValuesRecorder
}

// Recorder for MockIntValues (not exported)
type _MockIntValuesRecorder struct {
	mock *MockIntValues
}

func NewMockIntValues(ctrl *gomock.Controller) *MockIntValues {
	mock := &MockIntValues{ctrl: ctrl}
	mock.recorder = &_MockIntValuesRecorder{mock}
	return mock
}

func (_m *MockIntValues) EXPECT() *_MockIntValuesRecorder {
	return _m.recorder
}

func (_m *MockIntValues) Iter() (iterator.ForwardIntIterator, error) {
	ret := _m.ctrl.Call(_m, "Iter")
	ret0, _ := ret[0].(iterator.ForwardIntIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIntValuesRecorder) Iter() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Iter")
}

func (_m *MockIntValues) Metadata() IntValuesMetadata {
	ret := _m.ctrl.Call(_m, "Metadata")
	ret0, _ := ret[0].(IntValuesMetadata)
	return ret0
}

func (_mr *_MockIntValuesRecorder) Metadata() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Metadata")
}

// Mock of DoubleValues interface
type MockDoubleValues struct {
	ctrl     *gomock.Controller
	recorder *_MockDoubleValuesRecorder
}

// Recorder for MockDoubleValues (not exported)
type _MockDoubleValuesRecorder struct {
	mock *MockDoubleValues
}

func NewMockDoubleValues(ctrl *gomock.Controller) *MockDoubleValues {
	mock := &MockDoubleValues{ctrl: ctrl}
	mock.recorder = &_MockDoubleValuesRecorder{mock}
	return mock
}

func (_m *MockDoubleValues) EXPECT() *_MockDoubleValuesRecorder {
	return _m.recorder
}

func (_m *MockDoubleValues) Iter() (iterator.ForwardDoubleIterator, error) {
	ret := _m.ctrl.Call(_m, "Iter")
	ret0, _ := ret[0].(iterator.ForwardDoubleIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDoubleValuesRecorder) Iter() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Iter")
}

func (_m *MockDoubleValues) Metadata() DoubleValuesMetadata {
	ret := _m.ctrl.Call(_m, "Metadata")
	ret0, _ := ret[0].(DoubleValuesMetadata)
	return ret0
}

func (_mr *_MockDoubleValuesRecorder) Metadata() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Metadata")
}

// Mock of StringValues interface
type MockStringValues struct {
	ctrl     *gomock.Controller
	recorder *_MockStringValuesRecorder
}

// Recorder for MockStringValues (not exported)
type _MockStringValuesRecorder struct {
	mock *MockStringValues
}

func NewMockStringValues(ctrl *gomock.Controller) *MockStringValues {
	mock := &MockStringValues{ctrl: ctrl}
	mock.recorder = &_MockStringValuesRecorder{mock}
	return mock
}

func (_m *MockStringValues) EXPECT() *_MockStringValuesRecorder {
	return _m.recorder
}

func (_m *MockStringValues) Iter() (iterator.ForwardStringIterator, error) {
	ret := _m.ctrl.Call(_m, "Iter")
	ret0, _ := ret[0].(iterator.ForwardStringIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStringValuesRecorder) Iter() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Iter")
}

func (_m *MockStringValues) Metadata() StringValuesMetadata {
	ret := _m.ctrl.Call(_m, "Metadata")
	ret0, _ := ret[0].(StringValuesMetadata)
	return ret0
}

func (_mr *_MockStringValuesRecorder) Metadata() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Metadata")
}

// Mock of TimeValues interface
type MockTimeValues struct {
	ctrl     *gomock.Controller
	recorder *_MockTimeValuesRecorder
}

// Recorder for MockTimeValues (not exported)
type _MockTimeValuesRecorder struct {
	mock *MockTimeValues
}

func NewMockTimeValues(ctrl *gomock.Controller) *MockTimeValues {
	mock := &MockTimeValues{ctrl: ctrl}
	mock.recorder = &_MockTimeValuesRecorder{mock}
	return mock
}

func (_m *MockTimeValues) EXPECT() *_MockTimeValuesRecorder {
	return _m.recorder
}

func (_m *MockTimeValues) Iter() (iterator.ForwardTimeIterator, error) {
	ret := _m.ctrl.Call(_m, "Iter")
	ret0, _ := ret[0].(iterator.ForwardTimeIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTimeValuesRecorder) Iter() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Iter")
}

func (_m *MockTimeValues) Metadata() TimeValuesMetadata {
	ret := _m.ctrl.Call(_m, "Metadata")
	ret0, _ := ret[0].(TimeValuesMetadata)
	return ret0
}

func (_mr *_MockTimeValuesRecorder) Metadata() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Metadata")
}
