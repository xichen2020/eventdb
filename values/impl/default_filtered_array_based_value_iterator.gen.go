// Copyright (c) 2019 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/mauricelam/genny

package impl

import (
	"fmt"

	"github.com/xichen2020/eventdb/document/field"

	"github.com/xichen2020/eventdb/filter"

	"github.com/xichen2020/eventdb/values/iterator"

	iterimpl "github.com/xichen2020/eventdb/values/iterator/impl"
)

// defaultFilteredArrayBasedBoolValueIterator creates a default bool value iterator.
func defaultFilteredArrayBasedBoolValueIterator(
	values *ArrayBasedBoolValues,
	op filter.Op,
	filterValue *field.ValueUnion,
) (iterator.PositionIterator, error) {
	flt, err := op.BoolFilter(filterValue)
	if err != nil {
		return nil, fmt.Errorf("invalid bool filter op %v with filter value %v", op, filterValue)
	}
	valuesIt, err := values.Iter()
	if err != nil {
		return nil, err
	}
	return iterimpl.NewFilteredBoolIterator(valuesIt, flt), nil
}

// defaultFilteredArrayBasedIntValueIterator creates a default int value iterator.
func defaultFilteredArrayBasedIntValueIterator(
	values *ArrayBasedIntValues,
	op filter.Op,
	filterValue *field.ValueUnion,
) (iterator.PositionIterator, error) {
	flt, err := op.IntFilter(filterValue)
	if err != nil {
		return nil, fmt.Errorf("invalid int filter op %v with filter value %v", op, filterValue)
	}
	valuesIt, err := values.Iter()
	if err != nil {
		return nil, err
	}
	return iterimpl.NewFilteredIntIterator(valuesIt, flt), nil
}

// defaultFilteredArrayBasedDoubleValueIterator creates a default double value iterator.
func defaultFilteredArrayBasedDoubleValueIterator(
	values *ArrayBasedDoubleValues,
	op filter.Op,
	filterValue *field.ValueUnion,
) (iterator.PositionIterator, error) {
	flt, err := op.DoubleFilter(filterValue)
	if err != nil {
		return nil, fmt.Errorf("invalid double filter op %v with filter value %v", op, filterValue)
	}
	valuesIt, err := values.Iter()
	if err != nil {
		return nil, err
	}
	return iterimpl.NewFilteredDoubleIterator(valuesIt, flt), nil
}

// defaultFilteredArrayBasedStringValueIterator creates a default string value iterator.
func defaultFilteredArrayBasedStringValueIterator(
	values *ArrayBasedStringValues,
	op filter.Op,
	filterValue *field.ValueUnion,
) (iterator.PositionIterator, error) {
	flt, err := op.StringFilter(filterValue)
	if err != nil {
		return nil, fmt.Errorf("invalid string filter op %v with filter value %v", op, filterValue)
	}
	valuesIt, err := values.Iter()
	if err != nil {
		return nil, err
	}
	return iterimpl.NewFilteredStringIterator(valuesIt, flt), nil
}

// defaultFilteredArrayBasedTimeValueIterator creates a default time value iterator.
func defaultFilteredArrayBasedTimeValueIterator(
	values *ArrayBasedTimeValues,
	op filter.Op,
	filterValue *field.ValueUnion,
) (iterator.PositionIterator, error) {
	flt, err := op.TimeFilter(filterValue)
	if err != nil {
		return nil, fmt.Errorf("invalid time filter op %v with filter value %v", op, filterValue)
	}
	valuesIt, err := values.Iter()
	if err != nil {
		return nil, err
	}
	return iterimpl.NewFilteredTimeIterator(valuesIt, flt), nil
}
