// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xichen2020/eventdb/storage/segment.go

// Package storage is a generated GoMock package.
package storage

import (
	"reflect"

	"github.com/golang/mock/gomock"
	"github.com/xichen2020/eventdb/event"
	"github.com/xichen2020/eventdb/persist"
)

// MockimmutableDatabaseSegment is a mock of immutableDatabaseSegment interface
type MockimmutableDatabaseSegment struct {
	ctrl     *gomock.Controller
	recorder *MockimmutableDatabaseSegmentMockRecorder
}

// MockimmutableDatabaseSegmentMockRecorder is the mock recorder for MockimmutableDatabaseSegment
type MockimmutableDatabaseSegmentMockRecorder struct {
	mock *MockimmutableDatabaseSegment
}

// NewMockimmutableDatabaseSegment creates a new mock instance
func NewMockimmutableDatabaseSegment(ctrl *gomock.Controller) *MockimmutableDatabaseSegment {
	mock := &MockimmutableDatabaseSegment{ctrl: ctrl}
	mock.recorder = &MockimmutableDatabaseSegmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockimmutableDatabaseSegment) EXPECT() *MockimmutableDatabaseSegmentMockRecorder {
	return m.recorder
}

// ID mocks base method
func (m *MockimmutableDatabaseSegment) ID() string {
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockimmutableDatabaseSegmentMockRecorder) ID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockimmutableDatabaseSegment)(nil).ID))
}

// MinTimeNanos mocks base method
func (m *MockimmutableDatabaseSegment) MinTimeNanos() int64 {
	ret := m.ctrl.Call(m, "MinTimeNanos")
	ret0, _ := ret[0].(int64)
	return ret0
}

// MinTimeNanos indicates an expected call of MinTimeNanos
func (mr *MockimmutableDatabaseSegmentMockRecorder) MinTimeNanos() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MinTimeNanos", reflect.TypeOf((*MockimmutableDatabaseSegment)(nil).MinTimeNanos))
}

// MaxTimeNanos mocks base method
func (m *MockimmutableDatabaseSegment) MaxTimeNanos() int64 {
	ret := m.ctrl.Call(m, "MaxTimeNanos")
	ret0, _ := ret[0].(int64)
	return ret0
}

// MaxTimeNanos indicates an expected call of MaxTimeNanos
func (mr *MockimmutableDatabaseSegmentMockRecorder) MaxTimeNanos() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxTimeNanos", reflect.TypeOf((*MockimmutableDatabaseSegment)(nil).MaxTimeNanos))
}

// NumDocuments mocks base method
func (m *MockimmutableDatabaseSegment) NumDocuments() int32 {
	ret := m.ctrl.Call(m, "NumDocuments")
	ret0, _ := ret[0].(int32)
	return ret0
}

// NumDocuments indicates an expected call of NumDocuments
func (mr *MockimmutableDatabaseSegmentMockRecorder) NumDocuments() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumDocuments", reflect.TypeOf((*MockimmutableDatabaseSegment)(nil).NumDocuments))
}

// Flush mocks base method
func (m *MockimmutableDatabaseSegment) Flush(persistFns persist.Fns) error {
	ret := m.ctrl.Call(m, "Flush", persistFns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush
func (mr *MockimmutableDatabaseSegmentMockRecorder) Flush(persistFns interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockimmutableDatabaseSegment)(nil).Flush), persistFns)
}

// MockmutableDatabaseSegment is a mock of mutableDatabaseSegment interface
type MockmutableDatabaseSegment struct {
	ctrl     *gomock.Controller
	recorder *MockmutableDatabaseSegmentMockRecorder
}

// MockmutableDatabaseSegmentMockRecorder is the mock recorder for MockmutableDatabaseSegment
type MockmutableDatabaseSegmentMockRecorder struct {
	mock *MockmutableDatabaseSegment
}

// NewMockmutableDatabaseSegment creates a new mock instance
func NewMockmutableDatabaseSegment(ctrl *gomock.Controller) *MockmutableDatabaseSegment {
	mock := &MockmutableDatabaseSegment{ctrl: ctrl}
	mock.recorder = &MockmutableDatabaseSegmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockmutableDatabaseSegment) EXPECT() *MockmutableDatabaseSegmentMockRecorder {
	return m.recorder
}

// ID mocks base method
func (m *MockmutableDatabaseSegment) ID() string {
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockmutableDatabaseSegmentMockRecorder) ID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockmutableDatabaseSegment)(nil).ID))
}

// MinTimeNanos mocks base method
func (m *MockmutableDatabaseSegment) MinTimeNanos() int64 {
	ret := m.ctrl.Call(m, "MinTimeNanos")
	ret0, _ := ret[0].(int64)
	return ret0
}

// MinTimeNanos indicates an expected call of MinTimeNanos
func (mr *MockmutableDatabaseSegmentMockRecorder) MinTimeNanos() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MinTimeNanos", reflect.TypeOf((*MockmutableDatabaseSegment)(nil).MinTimeNanos))
}

// MaxTimeNanos mocks base method
func (m *MockmutableDatabaseSegment) MaxTimeNanos() int64 {
	ret := m.ctrl.Call(m, "MaxTimeNanos")
	ret0, _ := ret[0].(int64)
	return ret0
}

// MaxTimeNanos indicates an expected call of MaxTimeNanos
func (mr *MockmutableDatabaseSegmentMockRecorder) MaxTimeNanos() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxTimeNanos", reflect.TypeOf((*MockmutableDatabaseSegment)(nil).MaxTimeNanos))
}

// NumDocuments mocks base method
func (m *MockmutableDatabaseSegment) NumDocuments() int32 {
	ret := m.ctrl.Call(m, "NumDocuments")
	ret0, _ := ret[0].(int32)
	return ret0
}

// NumDocuments indicates an expected call of NumDocuments
func (mr *MockmutableDatabaseSegmentMockRecorder) NumDocuments() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumDocuments", reflect.TypeOf((*MockmutableDatabaseSegment)(nil).NumDocuments))
}

// Flush mocks base method
func (m *MockmutableDatabaseSegment) Flush(persistFns persist.Fns) error {
	ret := m.ctrl.Call(m, "Flush", persistFns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush
func (mr *MockmutableDatabaseSegmentMockRecorder) Flush(persistFns interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockmutableDatabaseSegment)(nil).Flush), persistFns)
}

// IsFull mocks base method
func (m *MockmutableDatabaseSegment) IsFull() bool {
	ret := m.ctrl.Call(m, "IsFull")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFull indicates an expected call of IsFull
func (mr *MockmutableDatabaseSegmentMockRecorder) IsFull() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFull", reflect.TypeOf((*MockmutableDatabaseSegment)(nil).IsFull))
}

// Write mocks base method
func (m *MockmutableDatabaseSegment) Write(ev event.Event) error {
	ret := m.ctrl.Call(m, "Write", ev)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (mr *MockmutableDatabaseSegmentMockRecorder) Write(ev interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockmutableDatabaseSegment)(nil).Write), ev)
}

// Seal mocks base method
func (m *MockmutableDatabaseSegment) Seal() {
	m.ctrl.Call(m, "Seal")
}

// Seal indicates an expected call of Seal
func (mr *MockmutableDatabaseSegmentMockRecorder) Seal() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seal", reflect.TypeOf((*MockmutableDatabaseSegment)(nil).Seal))
}

// Close mocks base method
func (m *MockmutableDatabaseSegment) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockmutableDatabaseSegmentMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockmutableDatabaseSegment)(nil).Close))
}
