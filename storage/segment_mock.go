// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/xichen2020/eventdb/storage/segment.go

package storage

import (
	"github.com/golang/mock/gomock"
	"github.com/xichen2020/eventdb/event"
	"github.com/xichen2020/eventdb/persist"
)

// Mock of immutableDatabaseSegment interface
type MockimmutableDatabaseSegment struct {
	ctrl     *gomock.Controller
	recorder *_MockimmutableDatabaseSegmentRecorder
}

// Recorder for MockimmutableDatabaseSegment (not exported)
type _MockimmutableDatabaseSegmentRecorder struct {
	mock *MockimmutableDatabaseSegment
}

func NewMockimmutableDatabaseSegment(ctrl *gomock.Controller) *MockimmutableDatabaseSegment {
	mock := &MockimmutableDatabaseSegment{ctrl: ctrl}
	mock.recorder = &_MockimmutableDatabaseSegmentRecorder{mock}
	return mock
}

func (_m *MockimmutableDatabaseSegment) EXPECT() *_MockimmutableDatabaseSegmentRecorder {
	return _m.recorder
}

func (_m *MockimmutableDatabaseSegment) ID() string {
	ret := _m.ctrl.Call(_m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockimmutableDatabaseSegmentRecorder) ID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ID")
}

func (_m *MockimmutableDatabaseSegment) MinTimeNanos() int64 {
	ret := _m.ctrl.Call(_m, "MinTimeNanos")
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockimmutableDatabaseSegmentRecorder) MinTimeNanos() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MinTimeNanos")
}

func (_m *MockimmutableDatabaseSegment) MaxTimeNanos() int64 {
	ret := _m.ctrl.Call(_m, "MaxTimeNanos")
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockimmutableDatabaseSegmentRecorder) MaxTimeNanos() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MaxTimeNanos")
}

func (_m *MockimmutableDatabaseSegment) NumDocuments() int32 {
	ret := _m.ctrl.Call(_m, "NumDocuments")
	ret0, _ := ret[0].(int32)
	return ret0
}

func (_mr *_MockimmutableDatabaseSegmentRecorder) NumDocuments() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NumDocuments")
}

func (_m *MockimmutableDatabaseSegment) Flush(persistFns persist.Fns) error {
	ret := _m.ctrl.Call(_m, "Flush", persistFns)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockimmutableDatabaseSegmentRecorder) Flush(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Flush", arg0)
}

// Mock of mutableDatabaseSegment interface
type MockmutableDatabaseSegment struct {
	ctrl     *gomock.Controller
	recorder *_MockmutableDatabaseSegmentRecorder
}

// Recorder for MockmutableDatabaseSegment (not exported)
type _MockmutableDatabaseSegmentRecorder struct {
	mock *MockmutableDatabaseSegment
}

func NewMockmutableDatabaseSegment(ctrl *gomock.Controller) *MockmutableDatabaseSegment {
	mock := &MockmutableDatabaseSegment{ctrl: ctrl}
	mock.recorder = &_MockmutableDatabaseSegmentRecorder{mock}
	return mock
}

func (_m *MockmutableDatabaseSegment) EXPECT() *_MockmutableDatabaseSegmentRecorder {
	return _m.recorder
}

func (_m *MockmutableDatabaseSegment) ID() string {
	ret := _m.ctrl.Call(_m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockmutableDatabaseSegmentRecorder) ID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ID")
}

func (_m *MockmutableDatabaseSegment) MinTimeNanos() int64 {
	ret := _m.ctrl.Call(_m, "MinTimeNanos")
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockmutableDatabaseSegmentRecorder) MinTimeNanos() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MinTimeNanos")
}

func (_m *MockmutableDatabaseSegment) MaxTimeNanos() int64 {
	ret := _m.ctrl.Call(_m, "MaxTimeNanos")
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockmutableDatabaseSegmentRecorder) MaxTimeNanos() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MaxTimeNanos")
}

func (_m *MockmutableDatabaseSegment) NumDocuments() int32 {
	ret := _m.ctrl.Call(_m, "NumDocuments")
	ret0, _ := ret[0].(int32)
	return ret0
}

func (_mr *_MockmutableDatabaseSegmentRecorder) NumDocuments() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NumDocuments")
}

func (_m *MockmutableDatabaseSegment) Flush(persistFns persist.Fns) error {
	ret := _m.ctrl.Call(_m, "Flush", persistFns)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockmutableDatabaseSegmentRecorder) Flush(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Flush", arg0)
}

func (_m *MockmutableDatabaseSegment) Write(ev event.Event) error {
	ret := _m.ctrl.Call(_m, "Write", ev)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockmutableDatabaseSegmentRecorder) Write(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Write", arg0)
}

func (_m *MockmutableDatabaseSegment) Seal() {
	_m.ctrl.Call(_m, "Seal")
}

func (_mr *_MockmutableDatabaseSegmentRecorder) Seal() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Seal")
}

func (_m *MockmutableDatabaseSegment) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockmutableDatabaseSegmentRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}
