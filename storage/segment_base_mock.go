// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xichen2020/eventdb/storage/segment_base.go

// Package storage is a generated GoMock package.
package storage

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockimmutableSegmentBase is a mock of immutableSegmentBase interface
type MockimmutableSegmentBase struct {
	ctrl     *gomock.Controller
	recorder *MockimmutableSegmentBaseMockRecorder
}

// MockimmutableSegmentBaseMockRecorder is the mock recorder for MockimmutableSegmentBase
type MockimmutableSegmentBaseMockRecorder struct {
	mock *MockimmutableSegmentBase
}

// NewMockimmutableSegmentBase creates a new mock instance
func NewMockimmutableSegmentBase(ctrl *gomock.Controller) *MockimmutableSegmentBase {
	mock := &MockimmutableSegmentBase{ctrl: ctrl}
	mock.recorder = &MockimmutableSegmentBaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockimmutableSegmentBase) EXPECT() *MockimmutableSegmentBaseMockRecorder {
	return m.recorder
}

// ID mocks base method
func (m *MockimmutableSegmentBase) ID() string {
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockimmutableSegmentBaseMockRecorder) ID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockimmutableSegmentBase)(nil).ID))
}

// NumDocuments mocks base method
func (m *MockimmutableSegmentBase) NumDocuments() int32 {
	ret := m.ctrl.Call(m, "NumDocuments")
	ret0, _ := ret[0].(int32)
	return ret0
}

// NumDocuments indicates an expected call of NumDocuments
func (mr *MockimmutableSegmentBaseMockRecorder) NumDocuments() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumDocuments", reflect.TypeOf((*MockimmutableSegmentBase)(nil).NumDocuments))
}

// MinTimeNanos mocks base method
func (m *MockimmutableSegmentBase) MinTimeNanos() int64 {
	ret := m.ctrl.Call(m, "MinTimeNanos")
	ret0, _ := ret[0].(int64)
	return ret0
}

// MinTimeNanos indicates an expected call of MinTimeNanos
func (mr *MockimmutableSegmentBaseMockRecorder) MinTimeNanos() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MinTimeNanos", reflect.TypeOf((*MockimmutableSegmentBase)(nil).MinTimeNanos))
}

// MaxTimeNanos mocks base method
func (m *MockimmutableSegmentBase) MaxTimeNanos() int64 {
	ret := m.ctrl.Call(m, "MaxTimeNanos")
	ret0, _ := ret[0].(int64)
	return ret0
}

// MaxTimeNanos indicates an expected call of MaxTimeNanos
func (mr *MockimmutableSegmentBaseMockRecorder) MaxTimeNanos() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxTimeNanos", reflect.TypeOf((*MockimmutableSegmentBase)(nil).MaxTimeNanos))
}

// Intersects mocks base method
func (m *MockimmutableSegmentBase) Intersects(startNanosInclusive, endNanosExclusive int64) bool {
	ret := m.ctrl.Call(m, "Intersects", startNanosInclusive, endNanosExclusive)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Intersects indicates an expected call of Intersects
func (mr *MockimmutableSegmentBaseMockRecorder) Intersects(startNanosInclusive, endNanosExclusive interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersects", reflect.TypeOf((*MockimmutableSegmentBase)(nil).Intersects), startNanosInclusive, endNanosExclusive)
}

// IncAccessor mocks base method
func (m *MockimmutableSegmentBase) IncAccessor() {
	m.ctrl.Call(m, "IncAccessor")
}

// IncAccessor indicates an expected call of IncAccessor
func (mr *MockimmutableSegmentBaseMockRecorder) IncAccessor() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncAccessor", reflect.TypeOf((*MockimmutableSegmentBase)(nil).IncAccessor))
}

// DecAccessor mocks base method
func (m *MockimmutableSegmentBase) DecAccessor() {
	m.ctrl.Call(m, "DecAccessor")
}

// DecAccessor indicates an expected call of DecAccessor
func (mr *MockimmutableSegmentBaseMockRecorder) DecAccessor() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecAccessor", reflect.TypeOf((*MockimmutableSegmentBase)(nil).DecAccessor))
}

// NumAccessors mocks base method
func (m *MockimmutableSegmentBase) NumAccessors() int {
	ret := m.ctrl.Call(m, "NumAccessors")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumAccessors indicates an expected call of NumAccessors
func (mr *MockimmutableSegmentBaseMockRecorder) NumAccessors() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumAccessors", reflect.TypeOf((*MockimmutableSegmentBase)(nil).NumAccessors))
}

// Close mocks base method
func (m *MockimmutableSegmentBase) Close() {
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockimmutableSegmentBaseMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockimmutableSegmentBase)(nil).Close))
}

// MockmutableSegmentBase is a mock of mutableSegmentBase interface
type MockmutableSegmentBase struct {
	ctrl     *gomock.Controller
	recorder *MockmutableSegmentBaseMockRecorder
}

// MockmutableSegmentBaseMockRecorder is the mock recorder for MockmutableSegmentBase
type MockmutableSegmentBaseMockRecorder struct {
	mock *MockmutableSegmentBase
}

// NewMockmutableSegmentBase creates a new mock instance
func NewMockmutableSegmentBase(ctrl *gomock.Controller) *MockmutableSegmentBase {
	mock := &MockmutableSegmentBase{ctrl: ctrl}
	mock.recorder = &MockmutableSegmentBaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockmutableSegmentBase) EXPECT() *MockmutableSegmentBaseMockRecorder {
	return m.recorder
}

// ID mocks base method
func (m *MockmutableSegmentBase) ID() string {
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockmutableSegmentBaseMockRecorder) ID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockmutableSegmentBase)(nil).ID))
}

// NumDocuments mocks base method
func (m *MockmutableSegmentBase) NumDocuments() int32 {
	ret := m.ctrl.Call(m, "NumDocuments")
	ret0, _ := ret[0].(int32)
	return ret0
}

// NumDocuments indicates an expected call of NumDocuments
func (mr *MockmutableSegmentBaseMockRecorder) NumDocuments() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumDocuments", reflect.TypeOf((*MockmutableSegmentBase)(nil).NumDocuments))
}

// MinTimeNanos mocks base method
func (m *MockmutableSegmentBase) MinTimeNanos() int64 {
	ret := m.ctrl.Call(m, "MinTimeNanos")
	ret0, _ := ret[0].(int64)
	return ret0
}

// MinTimeNanos indicates an expected call of MinTimeNanos
func (mr *MockmutableSegmentBaseMockRecorder) MinTimeNanos() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MinTimeNanos", reflect.TypeOf((*MockmutableSegmentBase)(nil).MinTimeNanos))
}

// MaxTimeNanos mocks base method
func (m *MockmutableSegmentBase) MaxTimeNanos() int64 {
	ret := m.ctrl.Call(m, "MaxTimeNanos")
	ret0, _ := ret[0].(int64)
	return ret0
}

// MaxTimeNanos indicates an expected call of MaxTimeNanos
func (mr *MockmutableSegmentBaseMockRecorder) MaxTimeNanos() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxTimeNanos", reflect.TypeOf((*MockmutableSegmentBase)(nil).MaxTimeNanos))
}

// Intersects mocks base method
func (m *MockmutableSegmentBase) Intersects(startNanosInclusive, endNanosExclusive int64) bool {
	ret := m.ctrl.Call(m, "Intersects", startNanosInclusive, endNanosExclusive)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Intersects indicates an expected call of Intersects
func (mr *MockmutableSegmentBaseMockRecorder) Intersects(startNanosInclusive, endNanosExclusive interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intersects", reflect.TypeOf((*MockmutableSegmentBase)(nil).Intersects), startNanosInclusive, endNanosExclusive)
}

// IncAccessor mocks base method
func (m *MockmutableSegmentBase) IncAccessor() {
	m.ctrl.Call(m, "IncAccessor")
}

// IncAccessor indicates an expected call of IncAccessor
func (mr *MockmutableSegmentBaseMockRecorder) IncAccessor() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncAccessor", reflect.TypeOf((*MockmutableSegmentBase)(nil).IncAccessor))
}

// DecAccessor mocks base method
func (m *MockmutableSegmentBase) DecAccessor() {
	m.ctrl.Call(m, "DecAccessor")
}

// DecAccessor indicates an expected call of DecAccessor
func (mr *MockmutableSegmentBaseMockRecorder) DecAccessor() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecAccessor", reflect.TypeOf((*MockmutableSegmentBase)(nil).DecAccessor))
}

// NumAccessors mocks base method
func (m *MockmutableSegmentBase) NumAccessors() int {
	ret := m.ctrl.Call(m, "NumAccessors")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumAccessors indicates an expected call of NumAccessors
func (mr *MockmutableSegmentBaseMockRecorder) NumAccessors() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumAccessors", reflect.TypeOf((*MockmutableSegmentBase)(nil).NumAccessors))
}

// Close mocks base method
func (m *MockmutableSegmentBase) Close() {
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockmutableSegmentBaseMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockmutableSegmentBase)(nil).Close))
}

// SetNumDocuments mocks base method
func (m *MockmutableSegmentBase) SetNumDocuments(v int32) {
	m.ctrl.Call(m, "SetNumDocuments", v)
}

// SetNumDocuments indicates an expected call of SetNumDocuments
func (mr *MockmutableSegmentBaseMockRecorder) SetNumDocuments(v interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNumDocuments", reflect.TypeOf((*MockmutableSegmentBase)(nil).SetNumDocuments), v)
}

// SetMinTimeNanos mocks base method
func (m *MockmutableSegmentBase) SetMinTimeNanos(v int64) {
	m.ctrl.Call(m, "SetMinTimeNanos", v)
}

// SetMinTimeNanos indicates an expected call of SetMinTimeNanos
func (mr *MockmutableSegmentBaseMockRecorder) SetMinTimeNanos(v interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMinTimeNanos", reflect.TypeOf((*MockmutableSegmentBase)(nil).SetMinTimeNanos), v)
}

// SetMaxTimeNanos mocks base method
func (m *MockmutableSegmentBase) SetMaxTimeNanos(v int64) {
	m.ctrl.Call(m, "SetMaxTimeNanos", v)
}

// SetMaxTimeNanos indicates an expected call of SetMaxTimeNanos
func (mr *MockmutableSegmentBaseMockRecorder) SetMaxTimeNanos(v interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxTimeNanos", reflect.TypeOf((*MockmutableSegmentBase)(nil).SetMaxTimeNanos), v)
}
