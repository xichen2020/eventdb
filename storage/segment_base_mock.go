// Copyright (c) 2019 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/xichen2020/eventdb/storage/segment_base.go

package storage

import (
	"github.com/golang/mock/gomock"
)

// Mock of immutableSegmentBase interface
type MockimmutableSegmentBase struct {
	ctrl     *gomock.Controller
	recorder *_MockimmutableSegmentBaseRecorder
}

// Recorder for MockimmutableSegmentBase (not exported)
type _MockimmutableSegmentBaseRecorder struct {
	mock *MockimmutableSegmentBase
}

func NewMockimmutableSegmentBase(ctrl *gomock.Controller) *MockimmutableSegmentBase {
	mock := &MockimmutableSegmentBase{ctrl: ctrl}
	mock.recorder = &_MockimmutableSegmentBaseRecorder{mock}
	return mock
}

func (_m *MockimmutableSegmentBase) EXPECT() *_MockimmutableSegmentBaseRecorder {
	return _m.recorder
}

func (_m *MockimmutableSegmentBase) ID() string {
	ret := _m.ctrl.Call(_m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockimmutableSegmentBaseRecorder) ID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ID")
}

func (_m *MockimmutableSegmentBase) NumDocuments() int32 {
	ret := _m.ctrl.Call(_m, "NumDocuments")
	ret0, _ := ret[0].(int32)
	return ret0
}

func (_mr *_MockimmutableSegmentBaseRecorder) NumDocuments() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NumDocuments")
}

func (_m *MockimmutableSegmentBase) MinTimeNanos() int64 {
	ret := _m.ctrl.Call(_m, "MinTimeNanos")
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockimmutableSegmentBaseRecorder) MinTimeNanos() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MinTimeNanos")
}

func (_m *MockimmutableSegmentBase) MaxTimeNanos() int64 {
	ret := _m.ctrl.Call(_m, "MaxTimeNanos")
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockimmutableSegmentBaseRecorder) MaxTimeNanos() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MaxTimeNanos")
}

func (_m *MockimmutableSegmentBase) Intersects(startNanosInclusive int64, endNanosExclusive int64) bool {
	ret := _m.ctrl.Call(_m, "Intersects", startNanosInclusive, endNanosExclusive)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockimmutableSegmentBaseRecorder) Intersects(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Intersects", arg0, arg1)
}

func (_m *MockimmutableSegmentBase) IncAccessor() {
	_m.ctrl.Call(_m, "IncAccessor")
}

func (_mr *_MockimmutableSegmentBaseRecorder) IncAccessor() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IncAccessor")
}

func (_m *MockimmutableSegmentBase) DecAccessor() {
	_m.ctrl.Call(_m, "DecAccessor")
}

func (_mr *_MockimmutableSegmentBaseRecorder) DecAccessor() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecAccessor")
}

func (_m *MockimmutableSegmentBase) NumAccessors() int {
	ret := _m.ctrl.Call(_m, "NumAccessors")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockimmutableSegmentBaseRecorder) NumAccessors() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NumAccessors")
}

func (_m *MockimmutableSegmentBase) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockimmutableSegmentBaseRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

// Mock of mutableSegmentBase interface
type MockmutableSegmentBase struct {
	ctrl     *gomock.Controller
	recorder *_MockmutableSegmentBaseRecorder
}

// Recorder for MockmutableSegmentBase (not exported)
type _MockmutableSegmentBaseRecorder struct {
	mock *MockmutableSegmentBase
}

func NewMockmutableSegmentBase(ctrl *gomock.Controller) *MockmutableSegmentBase {
	mock := &MockmutableSegmentBase{ctrl: ctrl}
	mock.recorder = &_MockmutableSegmentBaseRecorder{mock}
	return mock
}

func (_m *MockmutableSegmentBase) EXPECT() *_MockmutableSegmentBaseRecorder {
	return _m.recorder
}

func (_m *MockmutableSegmentBase) ID() string {
	ret := _m.ctrl.Call(_m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockmutableSegmentBaseRecorder) ID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ID")
}

func (_m *MockmutableSegmentBase) NumDocuments() int32 {
	ret := _m.ctrl.Call(_m, "NumDocuments")
	ret0, _ := ret[0].(int32)
	return ret0
}

func (_mr *_MockmutableSegmentBaseRecorder) NumDocuments() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NumDocuments")
}

func (_m *MockmutableSegmentBase) MinTimeNanos() int64 {
	ret := _m.ctrl.Call(_m, "MinTimeNanos")
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockmutableSegmentBaseRecorder) MinTimeNanos() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MinTimeNanos")
}

func (_m *MockmutableSegmentBase) MaxTimeNanos() int64 {
	ret := _m.ctrl.Call(_m, "MaxTimeNanos")
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockmutableSegmentBaseRecorder) MaxTimeNanos() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MaxTimeNanos")
}

func (_m *MockmutableSegmentBase) Intersects(startNanosInclusive int64, endNanosExclusive int64) bool {
	ret := _m.ctrl.Call(_m, "Intersects", startNanosInclusive, endNanosExclusive)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockmutableSegmentBaseRecorder) Intersects(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Intersects", arg0, arg1)
}

func (_m *MockmutableSegmentBase) IncAccessor() {
	_m.ctrl.Call(_m, "IncAccessor")
}

func (_mr *_MockmutableSegmentBaseRecorder) IncAccessor() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IncAccessor")
}

func (_m *MockmutableSegmentBase) DecAccessor() {
	_m.ctrl.Call(_m, "DecAccessor")
}

func (_mr *_MockmutableSegmentBaseRecorder) DecAccessor() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecAccessor")
}

func (_m *MockmutableSegmentBase) NumAccessors() int {
	ret := _m.ctrl.Call(_m, "NumAccessors")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockmutableSegmentBaseRecorder) NumAccessors() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NumAccessors")
}

func (_m *MockmutableSegmentBase) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockmutableSegmentBaseRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockmutableSegmentBase) SetNumDocuments(v int32) {
	_m.ctrl.Call(_m, "SetNumDocuments", v)
}

func (_mr *_MockmutableSegmentBaseRecorder) SetNumDocuments(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetNumDocuments", arg0)
}

func (_m *MockmutableSegmentBase) SetMinTimeNanos(v int64) {
	_m.ctrl.Call(_m, "SetMinTimeNanos", v)
}

func (_mr *_MockmutableSegmentBaseRecorder) SetMinTimeNanos(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMinTimeNanos", arg0)
}

func (_m *MockmutableSegmentBase) SetMaxTimeNanos(v int64) {
	_m.ctrl.Call(_m, "SetMaxTimeNanos", v)
}

func (_mr *_MockmutableSegmentBaseRecorder) SetMaxTimeNanos(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMaxTimeNanos", arg0)
}
