// Copyright (c) 2019 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/mauricelam/genny

package encoding

import (
	bitstream "github.com/dgryski/go-bitstream"
)

type applyOpToIntIntFn func(v int, delta int) int

// DeltaIntIterator iterates over a stream of delta encoded data.
type DeltaIntIterator struct {
	bitReader           *bitstream.BitReader
	bitsPerEncodedValue int64
	subFn               applyOpToIntIntFn
	addFn               applyOpToIntIntFn
	negativeBit         uint64
	curr                int
	err                 error
	closed              bool
	isDeltaValue        bool
}

func newDeltaIntIterator(
	extBitReader *bitstream.BitReader, // bitReader is an external bit reader for re-use.
	bitsPerEncodedValue int64,
	subFn applyOpToIntIntFn,
	addFn applyOpToIntIntFn,
) *DeltaIntIterator {
	return &DeltaIntIterator{
		bitReader:           extBitReader,
		bitsPerEncodedValue: bitsPerEncodedValue,
		subFn:               subFn,
		addFn:               addFn,
		negativeBit:         1 << uint(bitsPerEncodedValue-1),
	}
}

// Next iteration.
func (it *DeltaIntIterator) Next() bool {
	if it.closed || it.err != nil {
		return false
	}

	// First value is special and written as 64 bits.
	if !it.isDeltaValue {
		var firstValue uint64
		// Read 64 bits to read in a uint64 value.
		firstValue, it.err = it.bitReader.ReadBits(64)
		if it.err != nil {
			return false
		}
		it.curr = int(firstValue)
		// The remaining values are delta values.
		it.isDeltaValue = true
		return true
	}

	// Read in an extra bit for the sign.
	var delta uint64
	delta, it.err = it.bitReader.ReadBits(int(it.bitsPerEncodedValue))
	if it.err != nil {
		return false
	}
	// Check if negative bit is set.
	isNegative := (delta & it.negativeBit) == it.negativeBit
	if isNegative {
		// Zero out the negative bit.
		delta &^= it.negativeBit
		it.curr = it.subFn(it.curr, int(delta))
	} else {
		it.curr = it.addFn(it.curr, int(delta))
	}

	return true
}

// Current returns the current int.
func (it *DeltaIntIterator) Current() int { return it.curr }

// Err returns any error recorded while iterating.
func (it *DeltaIntIterator) Err() error { return it.err }

// Close the iterator.
func (it *DeltaIntIterator) Close() error {
	it.closed = true
	it.bitReader = nil
	it.err = nil
	it.subFn = nil
	it.addFn = nil
	return nil
}
