// Copyright (c) 2019 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/xichen2020/eventdb/index (interfaces: DocIDSetIterator,SeekableDocIDSetIterator,DocIDPositionIterator)

package index

import (
	"github.com/golang/mock/gomock"
)

// Mock of DocIDSetIterator interface
type MockDocIDSetIterator struct {
	ctrl     *gomock.Controller
	recorder *_MockDocIDSetIteratorRecorder
}

// Recorder for MockDocIDSetIterator (not exported)
type _MockDocIDSetIteratorRecorder struct {
	mock *MockDocIDSetIterator
}

func NewMockDocIDSetIterator(ctrl *gomock.Controller) *MockDocIDSetIterator {
	mock := &MockDocIDSetIterator{ctrl: ctrl}
	mock.recorder = &_MockDocIDSetIteratorRecorder{mock}
	return mock
}

func (_m *MockDocIDSetIterator) EXPECT() *_MockDocIDSetIteratorRecorder {
	return _m.recorder
}

func (_m *MockDocIDSetIterator) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockDocIDSetIteratorRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockDocIDSetIterator) DocID() int32 {
	ret := _m.ctrl.Call(_m, "DocID")
	ret0, _ := ret[0].(int32)
	return ret0
}

func (_mr *_MockDocIDSetIteratorRecorder) DocID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DocID")
}

func (_m *MockDocIDSetIterator) Next() bool {
	ret := _m.ctrl.Call(_m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockDocIDSetIteratorRecorder) Next() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next")
}

// Mock of SeekableDocIDSetIterator interface
type MockSeekableDocIDSetIterator struct {
	ctrl     *gomock.Controller
	recorder *_MockSeekableDocIDSetIteratorRecorder
}

// Recorder for MockSeekableDocIDSetIterator (not exported)
type _MockSeekableDocIDSetIteratorRecorder struct {
	mock *MockSeekableDocIDSetIterator
}

func NewMockSeekableDocIDSetIterator(ctrl *gomock.Controller) *MockSeekableDocIDSetIterator {
	mock := &MockSeekableDocIDSetIterator{ctrl: ctrl}
	mock.recorder = &_MockSeekableDocIDSetIteratorRecorder{mock}
	return mock
}

func (_m *MockSeekableDocIDSetIterator) EXPECT() *_MockSeekableDocIDSetIteratorRecorder {
	return _m.recorder
}

func (_m *MockSeekableDocIDSetIterator) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockSeekableDocIDSetIteratorRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockSeekableDocIDSetIterator) DocID() int32 {
	ret := _m.ctrl.Call(_m, "DocID")
	ret0, _ := ret[0].(int32)
	return ret0
}

func (_mr *_MockSeekableDocIDSetIteratorRecorder) DocID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DocID")
}

func (_m *MockSeekableDocIDSetIterator) Next() bool {
	ret := _m.ctrl.Call(_m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockSeekableDocIDSetIteratorRecorder) Next() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next")
}

func (_m *MockSeekableDocIDSetIterator) SeekForward(_param0 int) error {
	ret := _m.ctrl.Call(_m, "SeekForward", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSeekableDocIDSetIteratorRecorder) SeekForward(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SeekForward", arg0)
}

// Mock of DocIDPositionIterator interface
type MockDocIDPositionIterator struct {
	ctrl     *gomock.Controller
	recorder *_MockDocIDPositionIteratorRecorder
}

// Recorder for MockDocIDPositionIterator (not exported)
type _MockDocIDPositionIteratorRecorder struct {
	mock *MockDocIDPositionIterator
}

func NewMockDocIDPositionIterator(ctrl *gomock.Controller) *MockDocIDPositionIterator {
	mock := &MockDocIDPositionIterator{ctrl: ctrl}
	mock.recorder = &_MockDocIDPositionIteratorRecorder{mock}
	return mock
}

func (_m *MockDocIDPositionIterator) EXPECT() *_MockDocIDPositionIteratorRecorder {
	return _m.recorder
}

func (_m *MockDocIDPositionIterator) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockDocIDPositionIteratorRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockDocIDPositionIterator) DocID() int32 {
	ret := _m.ctrl.Call(_m, "DocID")
	ret0, _ := ret[0].(int32)
	return ret0
}

func (_mr *_MockDocIDPositionIteratorRecorder) DocID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DocID")
}

func (_m *MockDocIDPositionIterator) Next() bool {
	ret := _m.ctrl.Call(_m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockDocIDPositionIteratorRecorder) Next() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next")
}

func (_m *MockDocIDPositionIterator) Position() int {
	ret := _m.ctrl.Call(_m, "Position")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockDocIDPositionIteratorRecorder) Position() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Position")
}
