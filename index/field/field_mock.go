// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xichen2020/eventdb/index/field (interfaces: BaseFieldIterator)

// Package field is a generated GoMock package.
package field

import (
	gomock "github.com/golang/mock/gomock"
	field "github.com/xichen2020/eventdb/document/field"
	reflect "reflect"
)

// MockBaseFieldIterator is a mock of BaseFieldIterator interface
type MockBaseFieldIterator struct {
	ctrl     *gomock.Controller
	recorder *MockBaseFieldIteratorMockRecorder
}

// MockBaseFieldIteratorMockRecorder is the mock recorder for MockBaseFieldIterator
type MockBaseFieldIteratorMockRecorder struct {
	mock *MockBaseFieldIterator
}

// NewMockBaseFieldIterator creates a new mock instance
func NewMockBaseFieldIterator(ctrl *gomock.Controller) *MockBaseFieldIterator {
	mock := &MockBaseFieldIterator{ctrl: ctrl}
	mock.recorder = &MockBaseFieldIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBaseFieldIterator) EXPECT() *MockBaseFieldIteratorMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockBaseFieldIterator) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockBaseFieldIteratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBaseFieldIterator)(nil).Close))
}

// DocID mocks base method
func (m *MockBaseFieldIterator) DocID() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DocID")
	ret0, _ := ret[0].(int32)
	return ret0
}

// DocID indicates an expected call of DocID
func (mr *MockBaseFieldIteratorMockRecorder) DocID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DocID", reflect.TypeOf((*MockBaseFieldIterator)(nil).DocID))
}

// Err mocks base method
func (m *MockBaseFieldIterator) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockBaseFieldIteratorMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockBaseFieldIterator)(nil).Err))
}

// Next mocks base method
func (m *MockBaseFieldIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockBaseFieldIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockBaseFieldIterator)(nil).Next))
}

// ValueUnion mocks base method
func (m *MockBaseFieldIterator) ValueUnion() field.ValueUnion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValueUnion")
	ret0, _ := ret[0].(field.ValueUnion)
	return ret0
}

// ValueUnion indicates an expected call of ValueUnion
func (mr *MockBaseFieldIteratorMockRecorder) ValueUnion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValueUnion", reflect.TypeOf((*MockBaseFieldIterator)(nil).ValueUnion))
}
