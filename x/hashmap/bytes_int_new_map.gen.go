// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/mauricelam/genny

package hashmap

import (
	"bytes"

	"github.com/m3db/m3/src/x/pool"

	"github.com/cespare/xxhash"
)

// BytesIntHashMapOptions provides options used when created the map.
type BytesIntHashMapOptions struct {
	InitialSize int
	KeyCopyPool pool.BytesPool
}

// NewBytesIntHashMap returns a new byte keyed map.
func NewBytesIntHashMap(opts BytesIntHashMapOptions) *BytesIntHashMap {
	var (
		copyFn     BytesCopyFunc
		finalizeFn BytesFinalizeFunc
	)
	if pool := opts.KeyCopyPool; pool == nil {
		copyFn = func(k []byte) []byte {
			return append([]byte(nil), k...)
		}
	} else {
		copyFn = func(k []byte) []byte {
			keyLen := len(k)
			pooled := pool.Get(keyLen)[:keyLen]
			copy(pooled, k)
			return pooled
		}
		finalizeFn = func(k []byte) {
			pool.Put(k)
		}
	}
	return bytesIntHashAlloc(bytesIntHashOptions{
		hash: func(k []byte) BytesIntHashMapHash {
			return BytesIntHashMapHash(xxhash.Sum64(k))
		},
		equals:      bytes.Equal,
		copy:        copyFn,
		finalize:    finalizeFn,
		initialSize: opts.InitialSize,
	})
}
