// Copyright (c) 2019 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/mauricelam/genny

package iterator

import "github.com/xichen2020/eventdb/encoding"
import "github.com/xichen2020/eventdb/filter"
import (
	"github.com/xichen2020/eventdb/document"
)

// encoding.ForwardDoubleIterator is a value iterator.

// DocIDWithDoubleIterator iterates over a collection of (doc ID, value) pairs.
type DocIDWithDoubleIterator struct {
	dit document.DocIDSetIterator
	vit encoding.ForwardDoubleIterator
}

// NewDocIDWithDoubleIterator creates a new iterator.
func NewDocIDWithDoubleIterator(
	dit document.DocIDSetIterator,
	vit encoding.ForwardDoubleIterator,
) *DocIDWithDoubleIterator {
	return &DocIDWithDoubleIterator{
		dit: dit,
		vit: vit,
	}
}

// Next returns true if there are more pairs to be iterated over.
func (it *DocIDWithDoubleIterator) Next() bool { return it.dit.Next() && it.vit.Next() }

// DocID returns the current doc ID.
func (it *DocIDWithDoubleIterator) DocID() int32 { return it.dit.DocID() }

// Value returns the current value.
func (it *DocIDWithDoubleIterator) Value() float64 { return it.vit.Current() }

// Close closes the iterator.
func (it *DocIDWithDoubleIterator) Close() {
	it.dit.Close()
	it.vit.Close()
}

// document.DocIDDoublePairIterator iterates over a collection of (doc ID, value) pairs.

// filter.DoubleFilter performs filtering against values.

// FilteredDocIDWithDoubleIterator is a pair iterator with a value filter.
type FilteredDocIDWithDoubleIterator struct {
	pit document.DocIDDoublePairIterator
	f   filter.DoubleFilter

	docID int32
	value float64
}

// NewFilteredDocIDWithDoubleIterator creates a new filtering iterator.
func NewFilteredDocIDWithDoubleIterator(
	pit document.DocIDDoublePairIterator,
	f filter.DoubleFilter,
) *FilteredDocIDWithDoubleIterator {
	return &FilteredDocIDWithDoubleIterator{
		pit: pit,
		f:   f,
	}
}

// Next returns true if there are more values to be iterated over.
func (it *FilteredDocIDWithDoubleIterator) Next() bool {
	for it.pit.Next() {
		it.docID = it.pit.DocID()
		it.value = it.pit.Value()
		if it.f.Match(it.value) {
			return true
		}
	}
	return false
}

// DocID returns the current doc ID.
func (it *FilteredDocIDWithDoubleIterator) DocID() int32 { return it.docID }

// Value returns the current value.
func (it *FilteredDocIDWithDoubleIterator) Value() float64 { return it.value }

// Close closes the iterator.
func (it *FilteredDocIDWithDoubleIterator) Close() { it.pit.Close() }
