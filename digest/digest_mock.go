// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xichen2020/eventdb/digest (interfaces: FdWithDigestWriter)

// Package digest is a generated GoMock package.
package digest

import (
	"hash"
	"os"
	"reflect"

	"github.com/golang/mock/gomock"
)

// MockFdWithDigestWriter is a mock of FdWithDigestWriter interface
type MockFdWithDigestWriter struct {
	ctrl     *gomock.Controller
	recorder *MockFdWithDigestWriterMockRecorder
}

// MockFdWithDigestWriterMockRecorder is the mock recorder for MockFdWithDigestWriter
type MockFdWithDigestWriterMockRecorder struct {
	mock *MockFdWithDigestWriter
}

// NewMockFdWithDigestWriter creates a new mock instance
func NewMockFdWithDigestWriter(ctrl *gomock.Controller) *MockFdWithDigestWriter {
	mock := &MockFdWithDigestWriter{ctrl: ctrl}
	mock.recorder = &MockFdWithDigestWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFdWithDigestWriter) EXPECT() *MockFdWithDigestWriterMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockFdWithDigestWriter) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockFdWithDigestWriterMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFdWithDigestWriter)(nil).Close))
}

// Digest mocks base method
func (m *MockFdWithDigestWriter) Digest() hash.Hash32 {
	ret := m.ctrl.Call(m, "Digest")
	ret0, _ := ret[0].(hash.Hash32)
	return ret0
}

// Digest indicates an expected call of Digest
func (mr *MockFdWithDigestWriterMockRecorder) Digest() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Digest", reflect.TypeOf((*MockFdWithDigestWriter)(nil).Digest))
}

// Fd mocks base method
func (m *MockFdWithDigestWriter) Fd() *os.File {
	ret := m.ctrl.Call(m, "Fd")
	ret0, _ := ret[0].(*os.File)
	return ret0
}

// Fd indicates an expected call of Fd
func (mr *MockFdWithDigestWriterMockRecorder) Fd() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fd", reflect.TypeOf((*MockFdWithDigestWriter)(nil).Fd))
}

// Flush mocks base method
func (m *MockFdWithDigestWriter) Flush() error {
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush
func (mr *MockFdWithDigestWriterMockRecorder) Flush() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockFdWithDigestWriter)(nil).Flush))
}

// Reset mocks base method
func (m *MockFdWithDigestWriter) Reset(arg0 *os.File) {
	m.ctrl.Call(m, "Reset", arg0)
}

// Reset indicates an expected call of Reset
func (mr *MockFdWithDigestWriterMockRecorder) Reset(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockFdWithDigestWriter)(nil).Reset), arg0)
}

// Write mocks base method
func (m *MockFdWithDigestWriter) Write(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockFdWithDigestWriterMockRecorder) Write(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockFdWithDigestWriter)(nil).Write), arg0)
}
