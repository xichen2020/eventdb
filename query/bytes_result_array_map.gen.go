// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/mauricelam/genny

package query

import "github.com/xichen2020/eventdb/calculation"

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// BytesResultArrayHashMapHash is the hash for a given map entry, this is public to support
// iterating over the map using a native Go for loop.
type BytesResultArrayHashMapHash uint64

// BytesHashFunc is the hash function to execute when hashing a key.
type BytesHashFunc func([]byte) BytesResultArrayHashMapHash

// BytesEqualsFunc is the equals key function to execute when detecting equality of a key.
type BytesEqualsFunc func([]byte, []byte) bool

// BytesCopyFunc is the copy key function to execute when copying the key.
type BytesCopyFunc func([]byte) []byte

// BytesFinalizeFunc is the finalize key function to execute when finished with a key.
type BytesFinalizeFunc func([]byte)

// BytesResultArrayHashMap uses the genny package to provide a generic hash map that can be specialized
// by running the following command from this root of the repository:
// ```
// make hashmap-gen pkg=outpkg key_type=Type value_type=Type out_dir=/tmp
// ```
// Or if you would like to use bytes or ident.ID as keys you can use the
// partially specialized maps to generate your own maps as well:
// ```
// make byteshashmap-gen pkg=outpkg value_type=Type out_dir=/tmp
// make idhashmap-gen pkg=outpkg value_type=Type out_dir=/tmp
// ```
// This will output to stdout the generated source file to use for your map.
// It uses linear probing by incrementing the number of the hash created when
// hashing the identifier if there is a collision.
// BytesResultArrayHashMap is a value type and not an interface to allow for less painful
// upgrades when adding/removing methods, it is not likely to need mocking so
// an interface would not be super useful either.
type BytesResultArrayHashMap struct {
	bytesResultArrayHashOptions

	// lookup uses hash of the identifier for the key and the BytesResultArrayHashMapEntry value
	// wraps the value type and the key (used to ensure lookup is correct
	// when dealing with collisions), we use uint64 for the hash partially
	// because lookups of maps with uint64 keys has a fast path for Go.
	lookup map[BytesResultArrayHashMapHash]BytesResultArrayHashMapEntry
}

// bytesResultArrayHashOptions is a set of options used when creating an identifier map, it is kept
// private so that implementers of the generated map can specify their own options
// that partially fulfill these options.
type bytesResultArrayHashOptions struct {
	// hash is the hash function to execute when hashing a key.
	hash BytesHashFunc
	// equals is the equals key function to execute when detecting equality.
	equals BytesEqualsFunc
	// copy is the copy key function to execute when copying the key.
	copy BytesCopyFunc
	// finalize is the finalize key function to execute when finished with a
	// key, this is optional to specify.
	finalize BytesFinalizeFunc
	// initialSize is the initial size for the map, use zero to use Go's std map
	// initial size and consequently is optional to specify.
	initialSize int
}

// BytesResultArrayHashMapEntry is an entry in the map, this is public to support iterating
// over the map using a native Go for loop.
type BytesResultArrayHashMapEntry struct {
	// key is used to check equality on lookups to resolve collisions
	key bytesResultArrayHashKey
	// value type stored
	value calculation.ResultArray
}

type bytesResultArrayHashKey struct {
	key      []byte
	finalize bool
}

// Key returns the map entry key.
func (e BytesResultArrayHashMapEntry) Key() []byte {
	return e.key.key
}

// Value returns the map entry value.
func (e BytesResultArrayHashMapEntry) Value() calculation.ResultArray {
	return e.value
}

// bytesResultArrayHashAlloc is a non-exported function so that when generating the source code
// for the map you can supply a public constructor that sets the correct
// hash, equals, copy, finalize options without users of the map needing to
// implement them themselves.
func bytesResultArrayHashAlloc(opts bytesResultArrayHashOptions) *BytesResultArrayHashMap {
	m := &BytesResultArrayHashMap{bytesResultArrayHashOptions: opts}
	m.Reallocate()
	return m
}

func (m *BytesResultArrayHashMap) newBytesResultArrayHashMapKey(k []byte, opts bytesResultArrayHashKeyOptions) bytesResultArrayHashKey {
	key := bytesResultArrayHashKey{key: k, finalize: opts.finalizeKey}
	if !opts.copyKey {
		return key
	}

	key.key = m.copy(k)
	return key
}

func (m *BytesResultArrayHashMap) removeBytesResultArrayHashMapKey(hash BytesResultArrayHashMapHash, key bytesResultArrayHashKey) {
	delete(m.lookup, hash)
	if key.finalize {
		m.finalize(key.key)
	}
}

// Get returns a value in the map for an identifier if found.
func (m *BytesResultArrayHashMap) Get(k []byte) (calculation.ResultArray, bool) {
	hash := m.hash(k)
	for entry, ok := m.lookup[hash]; ok; entry, ok = m.lookup[hash] {
		if m.equals(entry.key.key, k) {
			return entry.value, true
		}
		// Linear probe to "next" to this entry (really a rehash)
		hash++
	}
	var empty calculation.ResultArray
	return empty, false
}

// Set will set the value for an identifier.
func (m *BytesResultArrayHashMap) Set(k []byte, v calculation.ResultArray) {
	m.set(k, v, bytesResultArrayHashKeyOptions{
		copyKey:     true,
		finalizeKey: m.finalize != nil,
	})
}

// SetUnsafeBytesOptions is a set of options to use when setting a value with
// the SetUnsafe method.
type SetUnsafeBytesOptions struct {
	NoCopyKey     bool
	NoFinalizeKey bool
}

// SetUnsafe will set the value for an identifier with unsafe options for how
// the map treats the key.
func (m *BytesResultArrayHashMap) SetUnsafe(k []byte, v calculation.ResultArray, opts SetUnsafeBytesOptions) {
	m.set(k, v, bytesResultArrayHashKeyOptions{
		copyKey:     !opts.NoCopyKey,
		finalizeKey: !opts.NoFinalizeKey,
	})
}

type bytesResultArrayHashKeyOptions struct {
	copyKey     bool
	finalizeKey bool
}

func (m *BytesResultArrayHashMap) set(k []byte, v calculation.ResultArray, opts bytesResultArrayHashKeyOptions) {
	hash := m.hash(k)
	for entry, ok := m.lookup[hash]; ok; entry, ok = m.lookup[hash] {
		if m.equals(entry.key.key, k) {
			m.lookup[hash] = BytesResultArrayHashMapEntry{
				key:   entry.key,
				value: v,
			}
			return
		}
		// Linear probe to "next" to this entry (really a rehash)
		hash++
	}

	m.lookup[hash] = BytesResultArrayHashMapEntry{
		key:   m.newBytesResultArrayHashMapKey(k, opts),
		value: v,
	}
}

// Iter provides the underlying map to allow for using a native Go for loop
// to iterate the map, however callers should only ever read and not write
// the map.
func (m *BytesResultArrayHashMap) Iter() map[BytesResultArrayHashMapHash]BytesResultArrayHashMapEntry {
	return m.lookup
}

// Len returns the number of map entries in the map.
func (m *BytesResultArrayHashMap) Len() int {
	return len(m.lookup)
}

// Contains returns true if value exists for key, false otherwise, it is
// shorthand for a call to Get that doesn't return the value.
func (m *BytesResultArrayHashMap) Contains(k []byte) bool {
	_, ok := m.Get(k)
	return ok
}

// Delete will remove a value set in the map for the specified key.
func (m *BytesResultArrayHashMap) Delete(k []byte) {
	hash := m.hash(k)
	for entry, ok := m.lookup[hash]; ok; entry, ok = m.lookup[hash] {
		if m.equals(entry.key.key, k) {
			m.removeBytesResultArrayHashMapKey(hash, entry.key)
			return
		}
		// Linear probe to "next" to this entry (really a rehash)
		hash++
	}
}

// Reset will reset the map by simply deleting all keys to avoid
// allocating a new map.
func (m *BytesResultArrayHashMap) Reset() {
	for hash, entry := range m.lookup {
		m.removeBytesResultArrayHashMapKey(hash, entry.key)
	}
}

// Reallocate will avoid deleting all keys and reallocate a new
// map, this is useful if you believe you have a large map and
// will not need to grow back to a similar size.
func (m *BytesResultArrayHashMap) Reallocate() {
	if m.initialSize > 0 {
		m.lookup = make(map[BytesResultArrayHashMapHash]BytesResultArrayHashMapEntry, m.initialSize)
	} else {
		m.lookup = make(map[BytesResultArrayHashMapHash]BytesResultArrayHashMapEntry)
	}
}
