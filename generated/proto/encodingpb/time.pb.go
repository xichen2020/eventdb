// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/xichen2020/eventdb/generated/proto/encodingpb/time.proto

package encodingpb // import "github.com/xichen2020/eventdb/generated/proto/encodingpb"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ResolutionType int32

const (
	ResolutionType_UNKNOWN_RESOLUTION ResolutionType = 0
	ResolutionType_NANOSECOND         ResolutionType = 1
	ResolutionType_MICROSECOND        ResolutionType = 2
	ResolutionType_MILLISECOND        ResolutionType = 3
	ResolutionType_SECOND             ResolutionType = 4
)

var ResolutionType_name = map[int32]string{
	0: "UNKNOWN_RESOLUTION",
	1: "NANOSECOND",
	2: "MICROSECOND",
	3: "MILLISECOND",
	4: "SECOND",
}
var ResolutionType_value = map[string]int32{
	"UNKNOWN_RESOLUTION": 0,
	"NANOSECOND":         1,
	"MICROSECOND":        2,
	"MILLISECOND":        3,
	"SECOND":             4,
}

func (x ResolutionType) String() string {
	return proto.EnumName(ResolutionType_name, int32(x))
}
func (ResolutionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_time_44e9201d2638be91, []int{0}
}

type TimeMeta struct {
	Encoding   EncodingType   `protobuf:"varint,1,opt,name=encoding,proto3,enum=encodingpb.EncodingType" json:"encoding,omitempty"`
	Resolution ResolutionType `protobuf:"varint,2,opt,name=resolution,proto3,enum=encodingpb.ResolutionType" json:"resolution,omitempty"`
	// Bits per encoded value. All encoded values are bit packed.
	BitsPerEncodedValue  int64    `protobuf:"varint,3,opt,name=bits_per_encoded_value,json=bitsPerEncodedValue,proto3" json:"bits_per_encoded_value,omitempty"`
	DeltaStart           int64    `protobuf:"varint,4,opt,name=delta_start,json=deltaStart,proto3" json:"delta_start,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimeMeta) Reset()         { *m = TimeMeta{} }
func (m *TimeMeta) String() string { return proto.CompactTextString(m) }
func (*TimeMeta) ProtoMessage()    {}
func (*TimeMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_time_44e9201d2638be91, []int{0}
}
func (m *TimeMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TimeMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeMeta.Merge(dst, src)
}
func (m *TimeMeta) XXX_Size() int {
	return m.Size()
}
func (m *TimeMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeMeta.DiscardUnknown(m)
}

var xxx_messageInfo_TimeMeta proto.InternalMessageInfo

func (m *TimeMeta) GetEncoding() EncodingType {
	if m != nil {
		return m.Encoding
	}
	return EncodingType_UNKNOWN_ENCODING
}

func (m *TimeMeta) GetResolution() ResolutionType {
	if m != nil {
		return m.Resolution
	}
	return ResolutionType_UNKNOWN_RESOLUTION
}

func (m *TimeMeta) GetBitsPerEncodedValue() int64 {
	if m != nil {
		return m.BitsPerEncodedValue
	}
	return 0
}

func (m *TimeMeta) GetDeltaStart() int64 {
	if m != nil {
		return m.DeltaStart
	}
	return 0
}

func init() {
	proto.RegisterType((*TimeMeta)(nil), "encodingpb.TimeMeta")
	proto.RegisterEnum("encodingpb.ResolutionType", ResolutionType_name, ResolutionType_value)
}
func (m *TimeMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Encoding != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTime(dAtA, i, uint64(m.Encoding))
	}
	if m.Resolution != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTime(dAtA, i, uint64(m.Resolution))
	}
	if m.BitsPerEncodedValue != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTime(dAtA, i, uint64(m.BitsPerEncodedValue))
	}
	if m.DeltaStart != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTime(dAtA, i, uint64(m.DeltaStart))
	}
	return i, nil
}

func encodeVarintTime(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TimeMeta) Size() (n int) {
	var l int
	_ = l
	if m.Encoding != 0 {
		n += 1 + sovTime(uint64(m.Encoding))
	}
	if m.Resolution != 0 {
		n += 1 + sovTime(uint64(m.Resolution))
	}
	if m.BitsPerEncodedValue != 0 {
		n += 1 + sovTime(uint64(m.BitsPerEncodedValue))
	}
	if m.DeltaStart != 0 {
		n += 1 + sovTime(uint64(m.DeltaStart))
	}
	return n
}

func sovTime(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTime(x uint64) (n int) {
	return sovTime(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TimeMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encoding", wireType)
			}
			m.Encoding = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encoding |= (EncodingType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resolution", wireType)
			}
			m.Resolution = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resolution |= (ResolutionType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BitsPerEncodedValue", wireType)
			}
			m.BitsPerEncodedValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BitsPerEncodedValue |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeltaStart", wireType)
			}
			m.DeltaStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeltaStart |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTime(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTime
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTime
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTime
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTime
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTime
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTime(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTime = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTime   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/xichen2020/eventdb/generated/proto/encodingpb/time.proto", fileDescriptor_time_44e9201d2638be91)
}

var fileDescriptor_time_44e9201d2638be91 = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xcd, 0x4e, 0xc2, 0x40,
	0x14, 0x85, 0x19, 0x20, 0x84, 0x5c, 0x12, 0x24, 0x63, 0x42, 0x1a, 0x16, 0x95, 0xb8, 0x22, 0x2e,
	0x5a, 0x02, 0x2e, 0x8c, 0x3b, 0x85, 0x2e, 0x50, 0x98, 0x9a, 0x02, 0x9a, 0xb8, 0x69, 0x5a, 0x7a,
	0x85, 0x49, 0xa0, 0x6d, 0xa6, 0x03, 0x91, 0xb7, 0xf0, 0xb1, 0x5c, 0x1a, 0x9f, 0xc0, 0xe0, 0x8b,
	0x18, 0x86, 0x5f, 0xb7, 0xec, 0x6e, 0xbe, 0x73, 0xbe, 0x33, 0x8b, 0x81, 0xd6, 0x98, 0xcb, 0xc9,
	0xdc, 0x37, 0x46, 0xd1, 0xcc, 0x7c, 0xe7, 0xa3, 0x09, 0x86, 0x8d, 0x7a, 0xa3, 0x6e, 0xe2, 0x02,
	0x43, 0x19, 0xf8, 0xe6, 0x18, 0x43, 0x14, 0x9e, 0xc4, 0xc0, 0x8c, 0x45, 0x24, 0x23, 0x13, 0xc3,
	0x51, 0x14, 0xf0, 0x70, 0x1c, 0xfb, 0xa6, 0xe4, 0x33, 0x34, 0x14, 0xa5, 0x70, 0xc0, 0x95, 0xf6,
	0xe9, 0x83, 0xcb, 0x18, 0x93, 0xcd, 0xe2, 0xe5, 0x37, 0x81, 0xfc, 0x80, 0xcf, 0xb0, 0x87, 0xd2,
	0xa3, 0xd7, 0x90, 0xdf, 0xd5, 0x34, 0x52, 0x25, 0xb5, 0x62, 0x43, 0x33, 0x0e, 0x9e, 0x61, 0x6d,
	0xcf, 0xc1, 0x32, 0x46, 0x67, 0xdf, 0xa4, 0xb7, 0x00, 0x02, 0x93, 0x68, 0x3a, 0x97, 0x3c, 0x0a,
	0xb5, 0xb4, 0xf2, 0x2a, 0xc7, 0x9e, 0xb3, 0x4f, 0x95, 0x79, 0xd4, 0xa6, 0x4d, 0x28, 0xfb, 0x5c,
	0x26, 0x6e, 0x8c, 0xc2, 0x55, 0x06, 0x06, 0xee, 0xc2, 0x9b, 0xce, 0x51, 0xcb, 0x54, 0x49, 0x2d,
	0xe3, 0x9c, 0xaf, 0xd3, 0x27, 0x14, 0xd6, 0x26, 0x7b, 0x5e, 0x47, 0xf4, 0x02, 0x0a, 0x01, 0x4e,
	0xa5, 0xe7, 0x26, 0xd2, 0x13, 0x52, 0xcb, 0xaa, 0x26, 0x28, 0xd4, 0x5f, 0x93, 0xab, 0x37, 0x28,
	0xfe, 0x7f, 0x93, 0x96, 0x81, 0x0e, 0xd9, 0x23, 0xb3, 0x5f, 0x98, 0xeb, 0x58, 0x7d, 0xbb, 0x3b,
	0x1c, 0x74, 0x6c, 0x56, 0x4a, 0xd1, 0x22, 0x00, 0xbb, 0x63, 0x76, 0xdf, 0x6a, 0xd9, 0xac, 0x5d,
	0x22, 0xf4, 0x0c, 0x0a, 0xbd, 0x4e, 0xcb, 0xd9, 0x81, 0xf4, 0x06, 0x74, 0xbb, 0x9d, 0x2d, 0xc8,
	0x50, 0x80, 0xdc, 0xf6, 0xce, 0xde, 0x3f, 0x7c, 0xae, 0x74, 0xf2, 0xb5, 0xd2, 0xc9, 0xcf, 0x4a,
	0x27, 0x1f, 0xbf, 0x7a, 0xea, 0xf5, 0xe6, 0xd4, 0x4f, 0xf1, 0x73, 0x8a, 0x34, 0xff, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x8c, 0x5a, 0xde, 0xfb, 0x28, 0x02, 0x00, 0x00,
}
