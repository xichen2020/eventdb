// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/xichen2020/eventdb/generated/proto/encodingpb/types.proto

package encodingpb // import "github.com/xichen2020/eventdb/generated/proto/encodingpb"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CompressionType int32

const (
	CompressionType_UNKNOWN_COMPRESSION CompressionType = 0
	CompressionType_NONE                CompressionType = 1
	CompressionType_ZSTD                CompressionType = 2
)

var CompressionType_name = map[int32]string{
	0: "UNKNOWN_COMPRESSION",
	1: "NONE",
	2: "ZSTD",
}
var CompressionType_value = map[string]int32{
	"UNKNOWN_COMPRESSION": 0,
	"NONE":                1,
	"ZSTD":                2,
}

func (x CompressionType) String() string {
	return proto.EnumName(CompressionType_name, int32(x))
}
func (CompressionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_types_8e1d86072a4912c5, []int{0}
}

type EncodingType int32

const (
	EncodingType_UNKNOWN_ENCODING EncodingType = 0
	EncodingType_RAW_SIZE         EncodingType = 1
	EncodingType_DICTIONARY       EncodingType = 2
	EncodingType_DELTA            EncodingType = 3
	EncodingType_VARINT           EncodingType = 4
)

var EncodingType_name = map[int32]string{
	0: "UNKNOWN_ENCODING",
	1: "RAW_SIZE",
	2: "DICTIONARY",
	3: "DELTA",
	4: "VARINT",
}
var EncodingType_value = map[string]int32{
	"UNKNOWN_ENCODING": 0,
	"RAW_SIZE":         1,
	"DICTIONARY":       2,
	"DELTA":            3,
	"VARINT":           4,
}

func (x EncodingType) String() string {
	return proto.EnumName(EncodingType_name, int32(x))
}
func (EncodingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_types_8e1d86072a4912c5, []int{1}
}

func init() {
	proto.RegisterEnum("encodingpb.CompressionType", CompressionType_name, CompressionType_value)
	proto.RegisterEnum("encodingpb.EncodingType", EncodingType_name, EncodingType_value)
}

func init() {
	proto.RegisterFile("github.com/xichen2020/eventdb/generated/proto/encodingpb/types.proto", fileDescriptor_types_8e1d86072a4912c5)
}

var fileDescriptor_types_8e1d86072a4912c5 = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x72, 0x49, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xaf, 0xc8, 0x4c, 0xce, 0x48, 0xcd, 0x33, 0x32, 0x30,
	0x32, 0xd0, 0x4f, 0x2d, 0x4b, 0xcd, 0x2b, 0x49, 0x49, 0xd2, 0x4f, 0x4f, 0xcd, 0x4b, 0x2d, 0x4a,
	0x2c, 0x49, 0x4d, 0xd1, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x4f, 0xcd, 0x4b, 0xce, 0x4f, 0xc9,
	0xcc, 0x4b, 0x2f, 0x48, 0xd2, 0x2f, 0xa9, 0x2c, 0x48, 0x2d, 0xd6, 0x03, 0x0b, 0x0b, 0x71, 0x21,
	0xc4, 0xb5, 0xec, 0xb8, 0xf8, 0x9d, 0xf3, 0x73, 0x0b, 0x8a, 0x52, 0x8b, 0x8b, 0x33, 0xf3, 0xf3,
	0x42, 0x2a, 0x0b, 0x52, 0x85, 0xc4, 0xb9, 0x84, 0x43, 0xfd, 0xbc, 0xfd, 0xfc, 0xc3, 0xfd, 0xe2,
	0x9d, 0xfd, 0x7d, 0x03, 0x82, 0x5c, 0x83, 0x83, 0x3d, 0xfd, 0xfd, 0x04, 0x18, 0x84, 0x38, 0xb8,
	0x58, 0xfc, 0xfc, 0xfd, 0x5c, 0x05, 0x18, 0x41, 0xac, 0xa8, 0xe0, 0x10, 0x17, 0x01, 0x26, 0xad,
	0x48, 0x2e, 0x1e, 0x57, 0xa8, 0x69, 0x60, 0xcd, 0x22, 0x5c, 0x02, 0x30, 0xcd, 0xae, 0x7e, 0xce,
	0xfe, 0x2e, 0x9e, 0x7e, 0xee, 0x02, 0x0c, 0x42, 0x3c, 0x5c, 0x1c, 0x41, 0x8e, 0xe1, 0xf1, 0xc1,
	0x9e, 0x51, 0x20, 0xdd, 0x7c, 0x5c, 0x5c, 0x2e, 0x9e, 0xce, 0x21, 0x9e, 0xfe, 0x7e, 0x8e, 0x41,
	0x91, 0x02, 0x4c, 0x42, 0x9c, 0x5c, 0xac, 0x2e, 0xae, 0x3e, 0x21, 0x8e, 0x02, 0xcc, 0x42, 0x5c,
	0x5c, 0x6c, 0x61, 0x8e, 0x41, 0x9e, 0x7e, 0x21, 0x02, 0x2c, 0x4e, 0x5e, 0x27, 0x1e, 0xc9, 0x31,
	0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x51, 0x16, 0xe4,
	0x7a, 0x3f, 0x89, 0x0d, 0x2c, 0x62, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x99, 0xda, 0x2f, 0x79,
	0x41, 0x01, 0x00, 0x00,
}
