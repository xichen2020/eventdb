// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/xichen2020/eventdb/generated/proto/encodingpb/bool.proto

package encodingpb // import "github.com/xichen2020/eventdb/generated/proto/encodingpb"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type BoolMeta struct {
	NumTrues             int32    `protobuf:"varint,1,opt,name=num_trues,json=numTrues,proto3" json:"num_trues,omitempty"`
	NumFalses            int32    `protobuf:"varint,2,opt,name=num_falses,json=numFalses,proto3" json:"num_falses,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BoolMeta) Reset()         { *m = BoolMeta{} }
func (m *BoolMeta) String() string { return proto.CompactTextString(m) }
func (*BoolMeta) ProtoMessage()    {}
func (*BoolMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_bool_19dac286cd989ebd, []int{0}
}
func (m *BoolMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BoolMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BoolMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BoolMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoolMeta.Merge(dst, src)
}
func (m *BoolMeta) XXX_Size() int {
	return m.Size()
}
func (m *BoolMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_BoolMeta.DiscardUnknown(m)
}

var xxx_messageInfo_BoolMeta proto.InternalMessageInfo

func (m *BoolMeta) GetNumTrues() int32 {
	if m != nil {
		return m.NumTrues
	}
	return 0
}

func (m *BoolMeta) GetNumFalses() int32 {
	if m != nil {
		return m.NumFalses
	}
	return 0
}

func init() {
	proto.RegisterType((*BoolMeta)(nil), "encodingpb.BoolMeta")
}
func (m *BoolMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BoolMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumTrues != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBool(dAtA, i, uint64(m.NumTrues))
	}
	if m.NumFalses != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBool(dAtA, i, uint64(m.NumFalses))
	}
	return i, nil
}

func encodeVarintBool(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BoolMeta) Size() (n int) {
	var l int
	_ = l
	if m.NumTrues != 0 {
		n += 1 + sovBool(uint64(m.NumTrues))
	}
	if m.NumFalses != 0 {
		n += 1 + sovBool(uint64(m.NumFalses))
	}
	return n
}

func sovBool(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBool(x uint64) (n int) {
	return sovBool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BoolMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BoolMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BoolMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumTrues", wireType)
			}
			m.NumTrues = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumTrues |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumFalses", wireType)
			}
			m.NumFalses = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumFalses |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBool
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBool
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBool(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBool = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBool   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/xichen2020/eventdb/generated/proto/encodingpb/bool.proto", fileDescriptor_bool_19dac286cd989ebd)
}

var fileDescriptor_bool_19dac286cd989ebd = []byte{
	// 182 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x72, 0x4e, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xaf, 0xc8, 0x4c, 0xce, 0x48, 0xcd, 0x33, 0x32, 0x30,
	0x32, 0xd0, 0x4f, 0x2d, 0x4b, 0xcd, 0x2b, 0x49, 0x49, 0xd2, 0x4f, 0x4f, 0xcd, 0x4b, 0x2d, 0x4a,
	0x2c, 0x49, 0x4d, 0xd1, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x4f, 0xcd, 0x4b, 0xce, 0x4f, 0xc9,
	0xcc, 0x4b, 0x2f, 0x48, 0xd2, 0x4f, 0xca, 0xcf, 0xcf, 0xd1, 0x03, 0x8b, 0x0a, 0x71, 0x21, 0x84,
	0x95, 0xdc, 0xb8, 0x38, 0x9c, 0xf2, 0xf3, 0x73, 0x7c, 0x53, 0x4b, 0x12, 0x85, 0xa4, 0xb9, 0x38,
	0xf3, 0x4a, 0x73, 0xe3, 0x4b, 0x8a, 0x4a, 0x53, 0x8b, 0x25, 0x18, 0x15, 0x18, 0x35, 0x58, 0x83,
	0x38, 0xf2, 0x4a, 0x73, 0x43, 0x40, 0x7c, 0x21, 0x59, 0x2e, 0x2e, 0x90, 0x64, 0x5a, 0x62, 0x4e,
	0x71, 0x6a, 0xb1, 0x04, 0x13, 0x58, 0x16, 0xa4, 0xdc, 0x0d, 0x2c, 0xe0, 0xe4, 0x75, 0xe2, 0x91,
	0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x10, 0x65,
	0x41, 0xae, 0x53, 0x93, 0xd8, 0xc0, 0x22, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8b, 0x88,
	0x35, 0x84, 0xed, 0x00, 0x00, 0x00,
}
