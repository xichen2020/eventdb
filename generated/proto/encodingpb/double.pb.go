// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/xichen2020/eventdb/generated/proto/encodingpb/double.proto

package encodingpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DoubleMeta struct {
	NumValues int32   `protobuf:"varint,1,opt,name=num_values,json=numValues,proto3" json:"num_values,omitempty"`
	MinValue  float64 `protobuf:"fixed64,2,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	MaxValue  float64 `protobuf:"fixed64,3,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
}

func (m *DoubleMeta) Reset()                    { *m = DoubleMeta{} }
func (m *DoubleMeta) String() string            { return proto.CompactTextString(m) }
func (*DoubleMeta) ProtoMessage()               {}
func (*DoubleMeta) Descriptor() ([]byte, []int) { return fileDescriptorDouble, []int{0} }

func (m *DoubleMeta) GetNumValues() int32 {
	if m != nil {
		return m.NumValues
	}
	return 0
}

func (m *DoubleMeta) GetMinValue() float64 {
	if m != nil {
		return m.MinValue
	}
	return 0
}

func (m *DoubleMeta) GetMaxValue() float64 {
	if m != nil {
		return m.MaxValue
	}
	return 0
}

func init() {
	proto.RegisterType((*DoubleMeta)(nil), "encodingpb.DoubleMeta")
}
func (m *DoubleMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoubleMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumValues != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDouble(dAtA, i, uint64(m.NumValues))
	}
	if m.MinValue != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MinValue))))
		i += 8
	}
	if m.MaxValue != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxValue))))
		i += 8
	}
	return i, nil
}

func encodeVarintDouble(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DoubleMeta) Size() (n int) {
	var l int
	_ = l
	if m.NumValues != 0 {
		n += 1 + sovDouble(uint64(m.NumValues))
	}
	if m.MinValue != 0 {
		n += 9
	}
	if m.MaxValue != 0 {
		n += 9
	}
	return n
}

func sovDouble(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDouble(x uint64) (n int) {
	return sovDouble(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DoubleMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDouble
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoubleMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoubleMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumValues", wireType)
			}
			m.NumValues = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumValues |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MinValue = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxValue = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipDouble(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDouble(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDouble
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDouble
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDouble
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDouble(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDouble = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDouble   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/xichen2020/eventdb/generated/proto/encodingpb/double.proto", fileDescriptorDouble)
}

var fileDescriptorDouble = []byte{
	// 197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x72, 0x4d, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xaf, 0xc8, 0x4c, 0xce, 0x48, 0xcd, 0x33, 0x32, 0x30,
	0x32, 0xd0, 0x4f, 0x2d, 0x4b, 0xcd, 0x2b, 0x49, 0x49, 0xd2, 0x4f, 0x4f, 0xcd, 0x4b, 0x2d, 0x4a,
	0x2c, 0x49, 0x4d, 0xd1, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x4f, 0xcd, 0x4b, 0xce, 0x4f, 0xc9,
	0xcc, 0x4b, 0x2f, 0x48, 0xd2, 0x4f, 0xc9, 0x2f, 0x4d, 0xca, 0x49, 0xd5, 0x03, 0x8b, 0x0b, 0x71,
	0x21, 0x24, 0x94, 0x52, 0xb9, 0xb8, 0x5c, 0xc0, 0x72, 0xbe, 0xa9, 0x25, 0x89, 0x42, 0xb2, 0x5c,
	0x5c, 0x79, 0xa5, 0xb9, 0xf1, 0x65, 0x89, 0x39, 0xa5, 0xa9, 0xc5, 0x12, 0x8c, 0x0a, 0x8c, 0x1a,
	0xac, 0x41, 0x9c, 0x79, 0xa5, 0xb9, 0x61, 0x60, 0x01, 0x21, 0x69, 0x2e, 0xce, 0xdc, 0xcc, 0x3c,
	0x88, 0xb4, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x63, 0x10, 0x47, 0x6e, 0x66, 0x1e, 0x58, 0x16, 0x2c,
	0x99, 0x58, 0x01, 0x95, 0x64, 0x86, 0x4a, 0x26, 0x56, 0x80, 0x25, 0x9d, 0xbc, 0x4e, 0x3c, 0x92,
	0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0xa2, 0x2c,
	0xc8, 0xf5, 0x4b, 0x12, 0x1b, 0x58, 0xc4, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x7d, 0x4a, 0x7d,
	0x78, 0x0e, 0x01, 0x00, 0x00,
}
