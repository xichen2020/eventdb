// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/xichen2020/eventdb/generated/proto/encodingpb/bytes.proto

package encodingpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type BytesMeta struct {
	Encoding    EncodingType    `protobuf:"varint,1,opt,name=encoding,proto3,enum=encodingpb.EncodingType" json:"encoding,omitempty"`
	Compression CompressionType `protobuf:"varint,2,opt,name=compression,proto3,enum=encodingpb.CompressionType" json:"compression,omitempty"`
	NumValues   int32           `protobuf:"varint,3,opt,name=num_values,json=numValues,proto3" json:"num_values,omitempty"`
	MinValue    []byte          `protobuf:"bytes,4,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	MaxValue    []byte          `protobuf:"bytes,5,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
}

func (m *BytesMeta) Reset()                    { *m = BytesMeta{} }
func (m *BytesMeta) String() string            { return proto.CompactTextString(m) }
func (*BytesMeta) ProtoMessage()               {}
func (*BytesMeta) Descriptor() ([]byte, []int) { return fileDescriptorBytes, []int{0} }

func (m *BytesMeta) GetEncoding() EncodingType {
	if m != nil {
		return m.Encoding
	}
	return EncodingType_UNKNOWN_ENCODING
}

func (m *BytesMeta) GetCompression() CompressionType {
	if m != nil {
		return m.Compression
	}
	return CompressionType_UNKNOWN_COMPRESSION
}

func (m *BytesMeta) GetNumValues() int32 {
	if m != nil {
		return m.NumValues
	}
	return 0
}

func (m *BytesMeta) GetMinValue() []byte {
	if m != nil {
		return m.MinValue
	}
	return nil
}

func (m *BytesMeta) GetMaxValue() []byte {
	if m != nil {
		return m.MaxValue
	}
	return nil
}

type BytesArray struct {
	Data [][]byte `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (m *BytesArray) Reset()                    { *m = BytesArray{} }
func (m *BytesArray) String() string            { return proto.CompactTextString(m) }
func (*BytesArray) ProtoMessage()               {}
func (*BytesArray) Descriptor() ([]byte, []int) { return fileDescriptorBytes, []int{1} }

func (m *BytesArray) GetData() [][]byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*BytesMeta)(nil), "encodingpb.BytesMeta")
	proto.RegisterType((*BytesArray)(nil), "encodingpb.BytesArray")
}
func (m *BytesMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BytesMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Encoding != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBytes(dAtA, i, uint64(m.Encoding))
	}
	if m.Compression != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBytes(dAtA, i, uint64(m.Compression))
	}
	if m.NumValues != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBytes(dAtA, i, uint64(m.NumValues))
	}
	if len(m.MinValue) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBytes(dAtA, i, uint64(len(m.MinValue)))
		i += copy(dAtA[i:], m.MinValue)
	}
	if len(m.MaxValue) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBytes(dAtA, i, uint64(len(m.MaxValue)))
		i += copy(dAtA[i:], m.MaxValue)
	}
	return i, nil
}

func (m *BytesArray) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BytesArray) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, b := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBytes(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func encodeVarintBytes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BytesMeta) Size() (n int) {
	var l int
	_ = l
	if m.Encoding != 0 {
		n += 1 + sovBytes(uint64(m.Encoding))
	}
	if m.Compression != 0 {
		n += 1 + sovBytes(uint64(m.Compression))
	}
	if m.NumValues != 0 {
		n += 1 + sovBytes(uint64(m.NumValues))
	}
	l = len(m.MinValue)
	if l > 0 {
		n += 1 + l + sovBytes(uint64(l))
	}
	l = len(m.MaxValue)
	if l > 0 {
		n += 1 + l + sovBytes(uint64(l))
	}
	return n
}

func (m *BytesArray) Size() (n int) {
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, b := range m.Data {
			l = len(b)
			n += 1 + l + sovBytes(uint64(l))
		}
	}
	return n
}

func sovBytes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBytes(x uint64) (n int) {
	return sovBytes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BytesMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBytes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BytesMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BytesMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encoding", wireType)
			}
			m.Encoding = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBytes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encoding |= (EncodingType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compression", wireType)
			}
			m.Compression = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBytes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Compression |= (CompressionType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumValues", wireType)
			}
			m.NumValues = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBytes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumValues |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBytes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBytes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinValue = append(m.MinValue[:0], dAtA[iNdEx:postIndex]...)
			if m.MinValue == nil {
				m.MinValue = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBytes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBytes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxValue = append(m.MaxValue[:0], dAtA[iNdEx:postIndex]...)
			if m.MaxValue == nil {
				m.MaxValue = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBytes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBytes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BytesArray) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBytes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BytesArray: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BytesArray: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBytes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBytes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, make([]byte, postIndex-iNdEx))
			copy(m.Data[len(m.Data)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBytes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBytes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBytes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBytes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBytes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBytes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBytes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBytes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBytes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBytes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBytes   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/xichen2020/eventdb/generated/proto/encodingpb/bytes.proto", fileDescriptorBytes)
}

var fileDescriptorBytes = []byte{
	// 286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x31, 0x6d, 0x51, 0x7b, 0x54, 0x0c, 0x9e, 0x2c, 0x2a, 0xa2, 0xa8, 0x53, 0xa6, 0xb8,
	0x2a, 0x0c, 0x2c, 0x0c, 0x14, 0x58, 0x90, 0x58, 0x22, 0xc4, 0xc0, 0x82, 0x9c, 0xe4, 0x94, 0x5a,
	0xc2, 0x76, 0x94, 0x38, 0x55, 0xf2, 0x16, 0x3c, 0x16, 0x23, 0x2b, 0x1b, 0x0a, 0x2f, 0x82, 0x30,
	0x29, 0xe9, 0xdc, 0xed, 0xf4, 0x7f, 0xff, 0x77, 0x96, 0x0f, 0x6e, 0x33, 0x69, 0xd7, 0x55, 0x1c,
	0x26, 0x46, 0xf1, 0x5a, 0x26, 0x6b, 0xd4, 0xcb, 0xc5, 0x72, 0xc1, 0x71, 0x83, 0xda, 0xa6, 0x31,
	0xcf, 0x50, 0x63, 0x21, 0x2c, 0xa6, 0x3c, 0x2f, 0x8c, 0x35, 0x1c, 0x75, 0x62, 0x52, 0xa9, 0xb3,
	0x3c, 0xe6, 0x71, 0x63, 0xb1, 0x0c, 0x5d, 0x4c, 0xa1, 0xcf, 0x4f, 0xf7, 0xdf, 0x68, 0x9b, 0x7c,
	0xbb, 0x71, 0xfe, 0x49, 0x60, 0xb2, 0xfa, 0x7d, 0xe1, 0x01, 0xad, 0xa0, 0x17, 0x30, 0xde, 0xf6,
	0x18, 0xf1, 0x49, 0x70, 0xb2, 0x64, 0x61, 0x2f, 0x86, 0x77, 0xdd, 0xf8, 0xd8, 0xe4, 0x18, 0xfd,
	0x37, 0xe9, 0x15, 0x1c, 0x27, 0x46, 0xe5, 0x05, 0x96, 0xa5, 0x34, 0x9a, 0x1d, 0x3a, 0x71, 0xb6,
	0x2b, 0xde, 0xf4, 0xd8, 0xb9, 0xbb, 0x7d, 0x7a, 0x06, 0xa0, 0x2b, 0xf5, 0xb2, 0x11, 0xaf, 0x15,
	0x96, 0x6c, 0xe0, 0x93, 0x60, 0x14, 0x4d, 0x74, 0xa5, 0x9e, 0x5c, 0x40, 0x67, 0x30, 0x51, 0x52,
	0xff, 0x61, 0x36, 0xf4, 0x49, 0x30, 0x8d, 0xc6, 0x4a, 0x6a, 0x47, 0x1d, 0x14, 0x75, 0x07, 0x47,
	0x1d, 0x14, 0xb5, 0x83, 0x73, 0x1f, 0xc0, 0x7d, 0xed, 0xba, 0x28, 0x44, 0x43, 0x29, 0x0c, 0x53,
	0x61, 0x05, 0x23, 0xfe, 0x20, 0x98, 0x46, 0x6e, 0x5e, 0xdd, 0xbf, 0xb7, 0x1e, 0xf9, 0x68, 0x3d,
	0xf2, 0xd5, 0x7a, 0xe4, 0xed, 0xdb, 0x3b, 0x78, 0xbe, 0xdc, 0xf7, 0xaa, 0xf1, 0x91, 0x4b, 0xce,
	0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xfe, 0x9f, 0x6a, 0xf0, 0xea, 0x01, 0x00, 0x00,
}
