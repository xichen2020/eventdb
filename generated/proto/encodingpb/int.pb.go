// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/xichen2020/eventdb/generated/proto/encodingpb/int.proto

package encodingpb // import "github.com/xichen2020/eventdb/generated/proto/encodingpb"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type IntMeta struct {
	Encoding EncodingType `protobuf:"varint,1,opt,name=encoding,proto3,enum=encodingpb.EncodingType" json:"encoding,omitempty"`
	// Bytes per dictionary value since we can't do bit packing
	// in the int dictionary yet. See TODO below.
	BytesPerDictionaryValue int64 `protobuf:"varint,2,opt,name=bytes_per_dictionary_value,json=bytesPerDictionaryValue,proto3" json:"bytes_per_dictionary_value,omitempty"`
	// Bits per encoded value. All encoded values are bit packed.
	// This includes both delta encoded values and dictionary encoded values.
	BitsPerEncodedValue int64 `protobuf:"varint,3,opt,name=bits_per_encoded_value,json=bitsPerEncodedValue,proto3" json:"bits_per_encoded_value,omitempty"`
	// Min value for dictionary encoding table values.
	// Every dictionary encoded value is an positive num added to the min_value.
	MinValue int64 `protobuf:"varint,4,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	// First value for delta encoding.
	DeltaStart           int64    `protobuf:"varint,5,opt,name=delta_start,json=deltaStart,proto3" json:"delta_start,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IntMeta) Reset()         { *m = IntMeta{} }
func (m *IntMeta) String() string { return proto.CompactTextString(m) }
func (*IntMeta) ProtoMessage()    {}
func (*IntMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_int_907a185fba6757b7, []int{0}
}
func (m *IntMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IntMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IntMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *IntMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntMeta.Merge(dst, src)
}
func (m *IntMeta) XXX_Size() int {
	return m.Size()
}
func (m *IntMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_IntMeta.DiscardUnknown(m)
}

var xxx_messageInfo_IntMeta proto.InternalMessageInfo

func (m *IntMeta) GetEncoding() EncodingType {
	if m != nil {
		return m.Encoding
	}
	return EncodingType_UNKNOWN_ENCODING
}

func (m *IntMeta) GetBytesPerDictionaryValue() int64 {
	if m != nil {
		return m.BytesPerDictionaryValue
	}
	return 0
}

func (m *IntMeta) GetBitsPerEncodedValue() int64 {
	if m != nil {
		return m.BitsPerEncodedValue
	}
	return 0
}

func (m *IntMeta) GetMinValue() int64 {
	if m != nil {
		return m.MinValue
	}
	return 0
}

func (m *IntMeta) GetDeltaStart() int64 {
	if m != nil {
		return m.DeltaStart
	}
	return 0
}

// The int dictionary is stored as an opaque
// byte slice due to byte packing. To get the
// value at dictionary idx, you would seek to idx * bytes_per_value.
// and read bytes_per_dictionary_value # of bytes into an int.
// TODO(bodu): Implement `Seek` in the bit reader/writer package so we can
// do bit packing in the int dictionary (instead of byte packing).
type IntDictionary struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IntDictionary) Reset()         { *m = IntDictionary{} }
func (m *IntDictionary) String() string { return proto.CompactTextString(m) }
func (*IntDictionary) ProtoMessage()    {}
func (*IntDictionary) Descriptor() ([]byte, []int) {
	return fileDescriptor_int_907a185fba6757b7, []int{1}
}
func (m *IntDictionary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IntDictionary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IntDictionary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *IntDictionary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntDictionary.Merge(dst, src)
}
func (m *IntDictionary) XXX_Size() int {
	return m.Size()
}
func (m *IntDictionary) XXX_DiscardUnknown() {
	xxx_messageInfo_IntDictionary.DiscardUnknown(m)
}

var xxx_messageInfo_IntDictionary proto.InternalMessageInfo

func (m *IntDictionary) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*IntMeta)(nil), "encodingpb.IntMeta")
	proto.RegisterType((*IntDictionary)(nil), "encodingpb.IntDictionary")
}
func (m *IntMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IntMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Encoding != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInt(dAtA, i, uint64(m.Encoding))
	}
	if m.BytesPerDictionaryValue != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInt(dAtA, i, uint64(m.BytesPerDictionaryValue))
	}
	if m.BitsPerEncodedValue != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInt(dAtA, i, uint64(m.BitsPerEncodedValue))
	}
	if m.MinValue != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInt(dAtA, i, uint64(m.MinValue))
	}
	if m.DeltaStart != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInt(dAtA, i, uint64(m.DeltaStart))
	}
	return i, nil
}

func (m *IntDictionary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IntDictionary) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInt(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func encodeVarintInt(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *IntMeta) Size() (n int) {
	var l int
	_ = l
	if m.Encoding != 0 {
		n += 1 + sovInt(uint64(m.Encoding))
	}
	if m.BytesPerDictionaryValue != 0 {
		n += 1 + sovInt(uint64(m.BytesPerDictionaryValue))
	}
	if m.BitsPerEncodedValue != 0 {
		n += 1 + sovInt(uint64(m.BitsPerEncodedValue))
	}
	if m.MinValue != 0 {
		n += 1 + sovInt(uint64(m.MinValue))
	}
	if m.DeltaStart != 0 {
		n += 1 + sovInt(uint64(m.DeltaStart))
	}
	return n
}

func (m *IntDictionary) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovInt(uint64(l))
	}
	return n
}

func sovInt(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozInt(x uint64) (n int) {
	return sovInt(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IntMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IntMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IntMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encoding", wireType)
			}
			m.Encoding = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encoding |= (EncodingType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesPerDictionaryValue", wireType)
			}
			m.BytesPerDictionaryValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesPerDictionaryValue |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BitsPerEncodedValue", wireType)
			}
			m.BitsPerEncodedValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BitsPerEncodedValue |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinValue", wireType)
			}
			m.MinValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinValue |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeltaStart", wireType)
			}
			m.DeltaStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeltaStart |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IntDictionary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IntDictionary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IntDictionary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInt
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInt(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInt
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthInt
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowInt
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipInt(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthInt = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInt   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/xichen2020/eventdb/generated/proto/encodingpb/int.proto", fileDescriptor_int_907a185fba6757b7)
}

var fileDescriptor_int_907a185fba6757b7 = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0xcd, 0x4a, 0xc3, 0x40,
	0x14, 0x85, 0x1d, 0x5b, 0xb5, 0x8e, 0x3f, 0x8b, 0x11, 0x34, 0x54, 0x88, 0xa5, 0x6e, 0xba, 0xca,
	0x94, 0xd6, 0x85, 0xe0, 0xae, 0xb4, 0x8b, 0x0a, 0x42, 0xa9, 0xe2, 0xc2, 0x4d, 0x98, 0xc9, 0x5c,
	0xda, 0x81, 0x76, 0x12, 0xa6, 0xb7, 0xc5, 0xbc, 0x85, 0x8f, 0xe5, 0xd2, 0x47, 0x90, 0xf8, 0x00,
	0xbe, 0x82, 0x64, 0x12, 0x9b, 0x7d, 0x77, 0x97, 0xf3, 0x9d, 0xef, 0x90, 0x0c, 0x1d, 0xcc, 0x34,
	0xce, 0xd7, 0x32, 0x88, 0xe2, 0x25, 0x7f, 0xd7, 0xd1, 0x1c, 0x4c, 0xaf, 0xdb, 0xeb, 0x72, 0xd8,
	0x80, 0x41, 0x25, 0xf9, 0x0c, 0x0c, 0x58, 0x81, 0xa0, 0x78, 0x62, 0x63, 0x8c, 0x39, 0x98, 0x28,
	0x56, 0xda, 0xcc, 0x12, 0xc9, 0xb5, 0xc1, 0xc0, 0x85, 0x8c, 0x56, 0x69, 0x73, 0xb8, 0xf3, 0x1e,
	0xa6, 0x09, 0xac, 0x8a, 0xc5, 0xf6, 0x2f, 0xa1, 0x47, 0x63, 0x83, 0x4f, 0x80, 0x82, 0xdd, 0xd1,
	0xc6, 0x7f, 0xcb, 0x23, 0x2d, 0xd2, 0x39, 0xef, 0x79, 0x41, 0xa5, 0x05, 0xa3, 0xf2, 0x7c, 0x49,
	0x13, 0x98, 0x6e, 0x9b, 0xec, 0x81, 0x36, 0x65, 0x8a, 0xb0, 0x0a, 0x13, 0xb0, 0xa1, 0xd2, 0x11,
	0xea, 0xd8, 0x08, 0x9b, 0x86, 0x1b, 0xb1, 0x58, 0x83, 0xb7, 0xdf, 0x22, 0x9d, 0xda, 0xf4, 0xca,
	0x35, 0x26, 0x60, 0x87, 0x5b, 0xfe, 0x9a, 0x63, 0xd6, 0xa7, 0x97, 0x52, 0x63, 0xe1, 0xba, 0x45,
	0x50, 0xa5, 0x58, 0x73, 0xe2, 0x45, 0x4e, 0x27, 0x60, 0x47, 0x05, 0x2b, 0xa4, 0x6b, 0x7a, 0xbc,
	0xd4, 0xa6, 0xec, 0xd5, 0x5d, 0xaf, 0xb1, 0xd4, 0xa6, 0x80, 0x37, 0xf4, 0x44, 0xc1, 0x02, 0x45,
	0xb8, 0x42, 0x61, 0xd1, 0x3b, 0x70, 0x98, 0xba, 0xe8, 0x39, 0x4f, 0xda, 0xb7, 0xf4, 0x6c, 0x6c,
	0xb0, 0xfa, 0x10, 0xc6, 0x68, 0x5d, 0x09, 0x14, 0xee, 0x97, 0x4f, 0xa7, 0xee, 0x1e, 0x3c, 0x7e,
	0x66, 0x3e, 0xf9, 0xca, 0x7c, 0xf2, 0x9d, 0xf9, 0xe4, 0xe3, 0xc7, 0xdf, 0x7b, 0xbb, 0xdf, 0xf5,
	0xb9, 0xe5, 0xa1, 0x4b, 0xfa, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4e, 0xa6, 0x57, 0x7c, 0x01,
	0x02, 0x00, 0x00,
}
