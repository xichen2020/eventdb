// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/xichen2020/eventdb/generated/proto/encodingpb/string.proto

package encodingpb // import "github.com/xichen2020/eventdb/generated/proto/encodingpb"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type StringMeta struct {
	Encoding             EncodingType    `protobuf:"varint,1,opt,name=encoding,proto3,enum=encodingpb.EncodingType" json:"encoding,omitempty"`
	Compression          CompressionType `protobuf:"varint,2,opt,name=compression,proto3,enum=encodingpb.CompressionType" json:"compression,omitempty"`
	NumValues            int32           `protobuf:"varint,3,opt,name=num_values,json=numValues,proto3" json:"num_values,omitempty"`
	MinValue             string          `protobuf:"bytes,4,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	MaxValue             string          `protobuf:"bytes,5,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *StringMeta) Reset()         { *m = StringMeta{} }
func (m *StringMeta) String() string { return proto.CompactTextString(m) }
func (*StringMeta) ProtoMessage()    {}
func (*StringMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_string_b93e24a4475498b4, []int{0}
}
func (m *StringMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StringMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StringMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StringMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringMeta.Merge(dst, src)
}
func (m *StringMeta) XXX_Size() int {
	return m.Size()
}
func (m *StringMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_StringMeta.DiscardUnknown(m)
}

var xxx_messageInfo_StringMeta proto.InternalMessageInfo

func (m *StringMeta) GetEncoding() EncodingType {
	if m != nil {
		return m.Encoding
	}
	return EncodingType_UNKNOWN_ENCODING
}

func (m *StringMeta) GetCompression() CompressionType {
	if m != nil {
		return m.Compression
	}
	return CompressionType_UNKNOWN_COMPRESSION
}

func (m *StringMeta) GetNumValues() int32 {
	if m != nil {
		return m.NumValues
	}
	return 0
}

func (m *StringMeta) GetMinValue() string {
	if m != nil {
		return m.MinValue
	}
	return ""
}

func (m *StringMeta) GetMaxValue() string {
	if m != nil {
		return m.MaxValue
	}
	return ""
}

type StringArray struct {
	Data                 []string `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringArray) Reset()         { *m = StringArray{} }
func (m *StringArray) String() string { return proto.CompactTextString(m) }
func (*StringArray) ProtoMessage()    {}
func (*StringArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_string_b93e24a4475498b4, []int{1}
}
func (m *StringArray) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StringArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StringArray.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StringArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringArray.Merge(dst, src)
}
func (m *StringArray) XXX_Size() int {
	return m.Size()
}
func (m *StringArray) XXX_DiscardUnknown() {
	xxx_messageInfo_StringArray.DiscardUnknown(m)
}

var xxx_messageInfo_StringArray proto.InternalMessageInfo

func (m *StringArray) GetData() []string {
	if m != nil {
		return m.Data
	}
	return nil
}

type StringLengths struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringLengths) Reset()         { *m = StringLengths{} }
func (m *StringLengths) String() string { return proto.CompactTextString(m) }
func (*StringLengths) ProtoMessage()    {}
func (*StringLengths) Descriptor() ([]byte, []int) {
	return fileDescriptor_string_b93e24a4475498b4, []int{2}
}
func (m *StringLengths) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StringLengths) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StringLengths.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StringLengths) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringLengths.Merge(dst, src)
}
func (m *StringLengths) XXX_Size() int {
	return m.Size()
}
func (m *StringLengths) XXX_DiscardUnknown() {
	xxx_messageInfo_StringLengths.DiscardUnknown(m)
}

var xxx_messageInfo_StringLengths proto.InternalMessageInfo

func (m *StringLengths) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*StringMeta)(nil), "encodingpb.StringMeta")
	proto.RegisterType((*StringArray)(nil), "encodingpb.StringArray")
	proto.RegisterType((*StringLengths)(nil), "encodingpb.StringLengths")
}
func (m *StringMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Encoding != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintString(dAtA, i, uint64(m.Encoding))
	}
	if m.Compression != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintString(dAtA, i, uint64(m.Compression))
	}
	if m.NumValues != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintString(dAtA, i, uint64(m.NumValues))
	}
	if len(m.MinValue) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintString(dAtA, i, uint64(len(m.MinValue)))
		i += copy(dAtA[i:], m.MinValue)
	}
	if len(m.MaxValue) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintString(dAtA, i, uint64(len(m.MaxValue)))
		i += copy(dAtA[i:], m.MaxValue)
	}
	return i, nil
}

func (m *StringArray) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringArray) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, s := range m.Data {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *StringLengths) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringLengths) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintString(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func encodeVarintString(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *StringMeta) Size() (n int) {
	var l int
	_ = l
	if m.Encoding != 0 {
		n += 1 + sovString(uint64(m.Encoding))
	}
	if m.Compression != 0 {
		n += 1 + sovString(uint64(m.Compression))
	}
	if m.NumValues != 0 {
		n += 1 + sovString(uint64(m.NumValues))
	}
	l = len(m.MinValue)
	if l > 0 {
		n += 1 + l + sovString(uint64(l))
	}
	l = len(m.MaxValue)
	if l > 0 {
		n += 1 + l + sovString(uint64(l))
	}
	return n
}

func (m *StringArray) Size() (n int) {
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, s := range m.Data {
			l = len(s)
			n += 1 + l + sovString(uint64(l))
		}
	}
	return n
}

func (m *StringLengths) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovString(uint64(l))
	}
	return n
}

func sovString(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozString(x uint64) (n int) {
	return sovString(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StringMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowString
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encoding", wireType)
			}
			m.Encoding = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowString
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encoding |= (EncodingType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compression", wireType)
			}
			m.Compression = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowString
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Compression |= (CompressionType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumValues", wireType)
			}
			m.NumValues = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowString
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumValues |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowString
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthString
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowString
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthString
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipString(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthString
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringArray) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowString
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringArray: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringArray: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowString
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthString
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipString(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthString
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringLengths) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowString
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringLengths: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringLengths: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowString
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthString
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipString(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthString
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipString(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowString
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowString
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowString
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthString
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowString
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipString(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthString = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowString   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/xichen2020/eventdb/generated/proto/encodingpb/string.proto", fileDescriptor_string_b93e24a4475498b4)
}

var fileDescriptor_string_b93e24a4475498b4 = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0xc6, 0x31, 0x6d, 0x51, 0x73, 0x05, 0x06, 0x4f, 0x11, 0x15, 0x51, 0x28, 0x4b, 0xa6, 0xa4,
	0x2a, 0x0c, 0x2c, 0x0c, 0xfc, 0xe9, 0x82, 0x60, 0x09, 0x88, 0x81, 0x05, 0x39, 0xc9, 0x29, 0xb5,
	0x44, 0x2e, 0x91, 0xed, 0x54, 0xed, 0x5b, 0xf0, 0x58, 0x8c, 0xcc, 0x4c, 0xa8, 0xbc, 0x08, 0x92,
	0x53, 0x68, 0xe6, 0x6e, 0xa7, 0xef, 0xf7, 0xfb, 0xce, 0xf2, 0xc1, 0x34, 0x97, 0x66, 0x56, 0x27,
	0x61, 0x5a, 0x16, 0xd1, 0x42, 0xa6, 0x33, 0xa4, 0xc9, 0x78, 0x32, 0x8e, 0x70, 0x8e, 0x64, 0xb2,
	0x24, 0xca, 0x91, 0x50, 0x09, 0x83, 0x59, 0x54, 0xa9, 0xd2, 0x94, 0x11, 0x52, 0x5a, 0x66, 0x92,
	0xf2, 0x2a, 0x89, 0xb4, 0x51, 0x92, 0xf2, 0xd0, 0xe6, 0x1c, 0x36, 0xe0, 0xe8, 0x76, 0xeb, 0x95,
	0x66, 0x59, 0xa1, 0x6e, 0x36, 0x8e, 0xbe, 0x18, 0xc0, 0xa3, 0x7d, 0xe2, 0x01, 0x8d, 0xe0, 0xe7,
	0xd0, 0xff, 0x13, 0x5d, 0xe6, 0xb3, 0xe0, 0x70, 0xe2, 0x86, 0x9b, 0x66, 0x38, 0x5d, 0x8f, 0x4f,
	0xcb, 0x0a, 0xe3, 0x7f, 0x93, 0x5f, 0xc2, 0x20, 0x2d, 0x8b, 0x4a, 0xa1, 0xd6, 0xb2, 0x24, 0x77,
	0xd7, 0x16, 0x87, 0xed, 0xe2, 0xcd, 0x06, 0xdb, 0x6e, 0xdb, 0xe7, 0xc7, 0x00, 0x54, 0x17, 0xaf,
	0x73, 0xf1, 0x56, 0xa3, 0x76, 0x3b, 0x3e, 0x0b, 0x7a, 0xb1, 0x43, 0x75, 0xf1, 0x6c, 0x03, 0x3e,
	0x04, 0xa7, 0x90, 0xd4, 0x60, 0xb7, 0xeb, 0xb3, 0xc0, 0x89, 0xfb, 0x85, 0x24, 0x4b, 0x2d, 0x14,
	0x8b, 0x35, 0xec, 0xad, 0xa1, 0x58, 0x58, 0x38, 0x3a, 0x81, 0x41, 0xf3, 0xb7, 0x2b, 0xa5, 0xc4,
	0x92, 0x73, 0xe8, 0x66, 0xc2, 0x08, 0x97, 0xf9, 0x9d, 0xc0, 0x89, 0xed, 0x3c, 0x3a, 0x85, 0x83,
	0x46, 0xb9, 0x47, 0xca, 0xcd, 0x4c, 0xb7, 0x24, 0x16, 0xec, 0x37, 0xd2, 0xf5, 0xdd, 0xc7, 0xca,
	0x63, 0x9f, 0x2b, 0x8f, 0x7d, 0xaf, 0x3c, 0xf6, 0xfe, 0xe3, 0xed, 0xbc, 0x5c, 0x6c, 0x7b, 0xfc,
	0x64, 0xcf, 0x26, 0x67, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa4, 0x5d, 0x0d, 0xae, 0x12, 0x02,
	0x00, 0x00,
}
