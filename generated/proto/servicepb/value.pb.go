// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/xichen2020/eventdb/generated/proto/servicepb/value.proto

package servicepb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FieldValue_Type int32

const (
	FieldValue_UNKNOWNTYPE FieldValue_Type = 0
	FieldValue_NULL        FieldValue_Type = 1
	FieldValue_BOOL        FieldValue_Type = 2
	FieldValue_INT         FieldValue_Type = 3
	FieldValue_DOUBLE      FieldValue_Type = 4
	FieldValue_STRING      FieldValue_Type = 5
	FieldValue_TIME        FieldValue_Type = 6
)

var FieldValue_Type_name = map[int32]string{
	0: "UNKNOWNTYPE",
	1: "NULL",
	2: "BOOL",
	3: "INT",
	4: "DOUBLE",
	5: "STRING",
	6: "TIME",
}
var FieldValue_Type_value = map[string]int32{
	"UNKNOWNTYPE": 0,
	"NULL":        1,
	"BOOL":        2,
	"INT":         3,
	"DOUBLE":      4,
	"STRING":      5,
	"TIME":        6,
}

func (x FieldValue_Type) String() string {
	return proto.EnumName(FieldValue_Type_name, int32(x))
}
func (FieldValue_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorValue, []int{0, 0} }

type FilterValue_Type int32

const (
	FilterValue_UNKNOWNTYPE FilterValue_Type = 0
	FilterValue_BOOL        FilterValue_Type = 1
	FilterValue_NUMBER      FilterValue_Type = 2
	FilterValue_STRING      FilterValue_Type = 3
)

var FilterValue_Type_name = map[int32]string{
	0: "UNKNOWNTYPE",
	1: "BOOL",
	2: "NUMBER",
	3: "STRING",
}
var FilterValue_Type_value = map[string]int32{
	"UNKNOWNTYPE": 0,
	"BOOL":        1,
	"NUMBER":      2,
	"STRING":      3,
}

func (x FilterValue_Type) String() string {
	return proto.EnumName(FilterValue_Type_name, int32(x))
}
func (FilterValue_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorValue, []int{2, 0} }

type CalculationValue_Type int32

const (
	CalculationValue_UNKNOWNTYPE CalculationValue_Type = 0
	CalculationValue_NUMBER      CalculationValue_Type = 1
	CalculationValue_STRING      CalculationValue_Type = 2
)

var CalculationValue_Type_name = map[int32]string{
	0: "UNKNOWNTYPE",
	1: "NUMBER",
	2: "STRING",
}
var CalculationValue_Type_value = map[string]int32{
	"UNKNOWNTYPE": 0,
	"NUMBER":      1,
	"STRING":      2,
}

func (x CalculationValue_Type) String() string {
	return proto.EnumName(CalculationValue_Type_name, int32(x))
}
func (CalculationValue_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorValue, []int{4, 0} }

type FieldValue struct {
	Type         FieldValue_Type `protobuf:"varint,1,opt,name=type,proto3,enum=servicepb.FieldValue_Type" json:"type,omitempty"`
	BoolVal      bool            `protobuf:"varint,2,opt,name=bool_val,json=boolVal,proto3" json:"bool_val,omitempty"`
	IntVal       int64           `protobuf:"varint,3,opt,name=int_val,json=intVal,proto3" json:"int_val,omitempty"`
	DoubleVal    float64         `protobuf:"fixed64,4,opt,name=double_val,json=doubleVal,proto3" json:"double_val,omitempty"`
	StringVal    []byte          `protobuf:"bytes,5,opt,name=string_val,json=stringVal,proto3" json:"string_val,omitempty"`
	TimeNanosVal int64           `protobuf:"varint,6,opt,name=time_nanos_val,json=timeNanosVal,proto3" json:"time_nanos_val,omitempty"`
}

func (m *FieldValue) Reset()                    { *m = FieldValue{} }
func (m *FieldValue) String() string            { return proto.CompactTextString(m) }
func (*FieldValue) ProtoMessage()               {}
func (*FieldValue) Descriptor() ([]byte, []int) { return fileDescriptorValue, []int{0} }

func (m *FieldValue) GetType() FieldValue_Type {
	if m != nil {
		return m.Type
	}
	return FieldValue_UNKNOWNTYPE
}

func (m *FieldValue) GetBoolVal() bool {
	if m != nil {
		return m.BoolVal
	}
	return false
}

func (m *FieldValue) GetIntVal() int64 {
	if m != nil {
		return m.IntVal
	}
	return 0
}

func (m *FieldValue) GetDoubleVal() float64 {
	if m != nil {
		return m.DoubleVal
	}
	return 0
}

func (m *FieldValue) GetStringVal() []byte {
	if m != nil {
		return m.StringVal
	}
	return nil
}

func (m *FieldValue) GetTimeNanosVal() int64 {
	if m != nil {
		return m.TimeNanosVal
	}
	return 0
}

type OptionalFieldValue struct {
	// Types that are valid to be assigned to Value:
	//	*OptionalFieldValue_NoValue
	//	*OptionalFieldValue_Data
	Value isOptionalFieldValue_Value `protobuf_oneof:"value"`
}

func (m *OptionalFieldValue) Reset()                    { *m = OptionalFieldValue{} }
func (m *OptionalFieldValue) String() string            { return proto.CompactTextString(m) }
func (*OptionalFieldValue) ProtoMessage()               {}
func (*OptionalFieldValue) Descriptor() ([]byte, []int) { return fileDescriptorValue, []int{1} }

type isOptionalFieldValue_Value interface {
	isOptionalFieldValue_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type OptionalFieldValue_NoValue struct {
	NoValue bool `protobuf:"varint,1,opt,name=no_value,json=noValue,proto3,oneof"`
}
type OptionalFieldValue_Data struct {
	Data *FieldValue `protobuf:"bytes,2,opt,name=data,oneof"`
}

func (*OptionalFieldValue_NoValue) isOptionalFieldValue_Value() {}
func (*OptionalFieldValue_Data) isOptionalFieldValue_Value()    {}

func (m *OptionalFieldValue) GetValue() isOptionalFieldValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *OptionalFieldValue) GetNoValue() bool {
	if x, ok := m.GetValue().(*OptionalFieldValue_NoValue); ok {
		return x.NoValue
	}
	return false
}

func (m *OptionalFieldValue) GetData() *FieldValue {
	if x, ok := m.GetValue().(*OptionalFieldValue_Data); ok {
		return x.Data
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*OptionalFieldValue) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _OptionalFieldValue_OneofMarshaler, _OptionalFieldValue_OneofUnmarshaler, _OptionalFieldValue_OneofSizer, []interface{}{
		(*OptionalFieldValue_NoValue)(nil),
		(*OptionalFieldValue_Data)(nil),
	}
}

func _OptionalFieldValue_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*OptionalFieldValue)
	// value
	switch x := m.Value.(type) {
	case *OptionalFieldValue_NoValue:
		t := uint64(0)
		if x.NoValue {
			t = 1
		}
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *OptionalFieldValue_Data:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Data); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("OptionalFieldValue.Value has unexpected type %T", x)
	}
	return nil
}

func _OptionalFieldValue_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*OptionalFieldValue)
	switch tag {
	case 1: // value.no_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &OptionalFieldValue_NoValue{x != 0}
		return true, err
	case 2: // value.data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FieldValue)
		err := b.DecodeMessage(msg)
		m.Value = &OptionalFieldValue_Data{msg}
		return true, err
	default:
		return false, nil
	}
}

func _OptionalFieldValue_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*OptionalFieldValue)
	// value
	switch x := m.Value.(type) {
	case *OptionalFieldValue_NoValue:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += 1
	case *OptionalFieldValue_Data:
		s := proto.Size(x.Data)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type FilterValue struct {
	Type      FilterValue_Type `protobuf:"varint,1,opt,name=type,proto3,enum=servicepb.FilterValue_Type" json:"type,omitempty"`
	BoolVal   bool             `protobuf:"varint,2,opt,name=bool_val,json=boolVal,proto3" json:"bool_val,omitempty"`
	NumberVal float64          `protobuf:"fixed64,3,opt,name=number_val,json=numberVal,proto3" json:"number_val,omitempty"`
	StringVal string           `protobuf:"bytes,4,opt,name=string_val,json=stringVal,proto3" json:"string_val,omitempty"`
}

func (m *FilterValue) Reset()                    { *m = FilterValue{} }
func (m *FilterValue) String() string            { return proto.CompactTextString(m) }
func (*FilterValue) ProtoMessage()               {}
func (*FilterValue) Descriptor() ([]byte, []int) { return fileDescriptorValue, []int{2} }

func (m *FilterValue) GetType() FilterValue_Type {
	if m != nil {
		return m.Type
	}
	return FilterValue_UNKNOWNTYPE
}

func (m *FilterValue) GetBoolVal() bool {
	if m != nil {
		return m.BoolVal
	}
	return false
}

func (m *FilterValue) GetNumberVal() float64 {
	if m != nil {
		return m.NumberVal
	}
	return 0
}

func (m *FilterValue) GetStringVal() string {
	if m != nil {
		return m.StringVal
	}
	return ""
}

type OptionalFilterValue struct {
	// Types that are valid to be assigned to Value:
	//	*OptionalFilterValue_NoValue
	//	*OptionalFilterValue_Data
	Value isOptionalFilterValue_Value `protobuf_oneof:"value"`
}

func (m *OptionalFilterValue) Reset()                    { *m = OptionalFilterValue{} }
func (m *OptionalFilterValue) String() string            { return proto.CompactTextString(m) }
func (*OptionalFilterValue) ProtoMessage()               {}
func (*OptionalFilterValue) Descriptor() ([]byte, []int) { return fileDescriptorValue, []int{3} }

type isOptionalFilterValue_Value interface {
	isOptionalFilterValue_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type OptionalFilterValue_NoValue struct {
	NoValue bool `protobuf:"varint,1,opt,name=no_value,json=noValue,proto3,oneof"`
}
type OptionalFilterValue_Data struct {
	Data *FilterValue `protobuf:"bytes,2,opt,name=data,oneof"`
}

func (*OptionalFilterValue_NoValue) isOptionalFilterValue_Value() {}
func (*OptionalFilterValue_Data) isOptionalFilterValue_Value()    {}

func (m *OptionalFilterValue) GetValue() isOptionalFilterValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *OptionalFilterValue) GetNoValue() bool {
	if x, ok := m.GetValue().(*OptionalFilterValue_NoValue); ok {
		return x.NoValue
	}
	return false
}

func (m *OptionalFilterValue) GetData() *FilterValue {
	if x, ok := m.GetValue().(*OptionalFilterValue_Data); ok {
		return x.Data
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*OptionalFilterValue) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _OptionalFilterValue_OneofMarshaler, _OptionalFilterValue_OneofUnmarshaler, _OptionalFilterValue_OneofSizer, []interface{}{
		(*OptionalFilterValue_NoValue)(nil),
		(*OptionalFilterValue_Data)(nil),
	}
}

func _OptionalFilterValue_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*OptionalFilterValue)
	// value
	switch x := m.Value.(type) {
	case *OptionalFilterValue_NoValue:
		t := uint64(0)
		if x.NoValue {
			t = 1
		}
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *OptionalFilterValue_Data:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Data); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("OptionalFilterValue.Value has unexpected type %T", x)
	}
	return nil
}

func _OptionalFilterValue_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*OptionalFilterValue)
	switch tag {
	case 1: // value.no_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &OptionalFilterValue_NoValue{x != 0}
		return true, err
	case 2: // value.data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FilterValue)
		err := b.DecodeMessage(msg)
		m.Value = &OptionalFilterValue_Data{msg}
		return true, err
	default:
		return false, nil
	}
}

func _OptionalFilterValue_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*OptionalFilterValue)
	// value
	switch x := m.Value.(type) {
	case *OptionalFilterValue_NoValue:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += 1
	case *OptionalFilterValue_Data:
		s := proto.Size(x.Data)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CalculationValue struct {
	Type      CalculationValue_Type `protobuf:"varint,1,opt,name=type,proto3,enum=servicepb.CalculationValue_Type" json:"type,omitempty"`
	NumberVal float64               `protobuf:"fixed64,2,opt,name=number_val,json=numberVal,proto3" json:"number_val,omitempty"`
	StringVal string                `protobuf:"bytes,3,opt,name=string_val,json=stringVal,proto3" json:"string_val,omitempty"`
}

func (m *CalculationValue) Reset()                    { *m = CalculationValue{} }
func (m *CalculationValue) String() string            { return proto.CompactTextString(m) }
func (*CalculationValue) ProtoMessage()               {}
func (*CalculationValue) Descriptor() ([]byte, []int) { return fileDescriptorValue, []int{4} }

func (m *CalculationValue) GetType() CalculationValue_Type {
	if m != nil {
		return m.Type
	}
	return CalculationValue_UNKNOWNTYPE
}

func (m *CalculationValue) GetNumberVal() float64 {
	if m != nil {
		return m.NumberVal
	}
	return 0
}

func (m *CalculationValue) GetStringVal() string {
	if m != nil {
		return m.StringVal
	}
	return ""
}

func init() {
	proto.RegisterType((*FieldValue)(nil), "servicepb.FieldValue")
	proto.RegisterType((*OptionalFieldValue)(nil), "servicepb.OptionalFieldValue")
	proto.RegisterType((*FilterValue)(nil), "servicepb.FilterValue")
	proto.RegisterType((*OptionalFilterValue)(nil), "servicepb.OptionalFilterValue")
	proto.RegisterType((*CalculationValue)(nil), "servicepb.CalculationValue")
	proto.RegisterEnum("servicepb.FieldValue_Type", FieldValue_Type_name, FieldValue_Type_value)
	proto.RegisterEnum("servicepb.FilterValue_Type", FilterValue_Type_name, FilterValue_Type_value)
	proto.RegisterEnum("servicepb.CalculationValue_Type", CalculationValue_Type_name, CalculationValue_Type_value)
}
func (m *FieldValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintValue(dAtA, i, uint64(m.Type))
	}
	if m.BoolVal {
		dAtA[i] = 0x10
		i++
		if m.BoolVal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IntVal != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintValue(dAtA, i, uint64(m.IntVal))
	}
	if m.DoubleVal != 0 {
		dAtA[i] = 0x21
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DoubleVal))))
		i += 8
	}
	if len(m.StringVal) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintValue(dAtA, i, uint64(len(m.StringVal)))
		i += copy(dAtA[i:], m.StringVal)
	}
	if m.TimeNanosVal != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintValue(dAtA, i, uint64(m.TimeNanosVal))
	}
	return i, nil
}

func (m *OptionalFieldValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OptionalFieldValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		nn1, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *OptionalFieldValue_NoValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	if m.NoValue {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *OptionalFieldValue_Data) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintValue(dAtA, i, uint64(m.Data.Size()))
		n2, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *FilterValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FilterValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintValue(dAtA, i, uint64(m.Type))
	}
	if m.BoolVal {
		dAtA[i] = 0x10
		i++
		if m.BoolVal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NumberVal != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.NumberVal))))
		i += 8
	}
	if len(m.StringVal) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintValue(dAtA, i, uint64(len(m.StringVal)))
		i += copy(dAtA[i:], m.StringVal)
	}
	return i, nil
}

func (m *OptionalFilterValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OptionalFilterValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		nn3, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	return i, nil
}

func (m *OptionalFilterValue_NoValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	if m.NoValue {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *OptionalFilterValue_Data) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintValue(dAtA, i, uint64(m.Data.Size()))
		n4, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *CalculationValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalculationValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintValue(dAtA, i, uint64(m.Type))
	}
	if m.NumberVal != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.NumberVal))))
		i += 8
	}
	if len(m.StringVal) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintValue(dAtA, i, uint64(len(m.StringVal)))
		i += copy(dAtA[i:], m.StringVal)
	}
	return i, nil
}

func encodeVarintValue(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FieldValue) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovValue(uint64(m.Type))
	}
	if m.BoolVal {
		n += 2
	}
	if m.IntVal != 0 {
		n += 1 + sovValue(uint64(m.IntVal))
	}
	if m.DoubleVal != 0 {
		n += 9
	}
	l = len(m.StringVal)
	if l > 0 {
		n += 1 + l + sovValue(uint64(l))
	}
	if m.TimeNanosVal != 0 {
		n += 1 + sovValue(uint64(m.TimeNanosVal))
	}
	return n
}

func (m *OptionalFieldValue) Size() (n int) {
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *OptionalFieldValue_NoValue) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *OptionalFieldValue_Data) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovValue(uint64(l))
	}
	return n
}
func (m *FilterValue) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovValue(uint64(m.Type))
	}
	if m.BoolVal {
		n += 2
	}
	if m.NumberVal != 0 {
		n += 9
	}
	l = len(m.StringVal)
	if l > 0 {
		n += 1 + l + sovValue(uint64(l))
	}
	return n
}

func (m *OptionalFilterValue) Size() (n int) {
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *OptionalFilterValue_NoValue) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *OptionalFilterValue_Data) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovValue(uint64(l))
	}
	return n
}
func (m *CalculationValue) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovValue(uint64(m.Type))
	}
	if m.NumberVal != 0 {
		n += 9
	}
	l = len(m.StringVal)
	if l > 0 {
		n += 1 + l + sovValue(uint64(l))
	}
	return n
}

func sovValue(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozValue(x uint64) (n int) {
	return sovValue(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FieldValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (FieldValue_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolVal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoolVal = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntVal", wireType)
			}
			m.IntVal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IntVal |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoubleVal", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DoubleVal = float64(math.Float64frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringVal", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StringVal = append(m.StringVal[:0], dAtA[iNdEx:postIndex]...)
			if m.StringVal == nil {
				m.StringVal = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeNanosVal", wireType)
			}
			m.TimeNanosVal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeNanosVal |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OptionalFieldValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OptionalFieldValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OptionalFieldValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Value = &OptionalFieldValue_NoValue{b}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FieldValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &OptionalFieldValue_Data{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FilterValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilterValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilterValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (FilterValue_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolVal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoolVal = bool(v != 0)
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberVal", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.NumberVal = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringVal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StringVal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OptionalFilterValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OptionalFilterValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OptionalFilterValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Value = &OptionalFilterValue_NoValue{b}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FilterValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &OptionalFilterValue_Data{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CalculationValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalculationValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalculationValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (CalculationValue_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberVal", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.NumberVal = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringVal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValue
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StringVal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValue(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValue
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthValue
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowValue
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipValue(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthValue = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValue   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/xichen2020/eventdb/generated/proto/servicepb/value.proto", fileDescriptorValue)
}

var fileDescriptorValue = []byte{
	// 546 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xdf, 0x6e, 0xd3, 0x3e,
	0x1c, 0xc5, 0xeb, 0x24, 0xeb, 0x9f, 0xef, 0xa6, 0xfd, 0xa2, 0xfc, 0x04, 0x8c, 0x4d, 0xab, 0xa2,
	0x88, 0x8b, 0x4a, 0x40, 0x32, 0x15, 0x24, 0xc4, 0x6d, 0x47, 0xc7, 0x2a, 0xba, 0x14, 0x85, 0xb6,
	0x08, 0x6e, 0x2a, 0xa7, 0x35, 0x99, 0x25, 0xd7, 0xae, 0x52, 0xa7, 0x62, 0x6f, 0xc1, 0x83, 0x70,
	0xcf, 0x2b, 0x70, 0x89, 0x78, 0x02, 0x54, 0x5e, 0x04, 0xd9, 0x41, 0x6d, 0xba, 0x8d, 0x0a, 0x71,
	0xe7, 0x9c, 0x73, 0x72, 0x5a, 0x7f, 0x8e, 0x14, 0x38, 0x4d, 0xa8, 0xbc, 0xcc, 0x62, 0x7f, 0x2c,
	0xa6, 0xc1, 0x47, 0x3a, 0xbe, 0x24, 0xbc, 0x79, 0xd2, 0x3c, 0x09, 0xc8, 0x82, 0x70, 0x39, 0x89,
	0x83, 0x84, 0x70, 0x92, 0x62, 0x49, 0x26, 0xc1, 0x2c, 0x15, 0x52, 0x04, 0x73, 0x92, 0x2e, 0xe8,
	0x98, 0xcc, 0xe2, 0x60, 0x81, 0x59, 0x46, 0x7c, 0xad, 0x3a, 0xb5, 0x95, 0x7c, 0xf8, 0xb8, 0xd0,
	0x97, 0x88, 0x44, 0xe4, 0xef, 0xc5, 0xd9, 0x07, 0xfd, 0x94, 0x97, 0xa8, 0x53, 0xfe, 0xa6, 0xf7,
	0xd9, 0x00, 0x38, 0xa3, 0x84, 0x4d, 0x86, 0xaa, 0xce, 0xf1, 0xc1, 0x92, 0x57, 0x33, 0x72, 0x80,
	0x5c, 0xd4, 0xd8, 0x6f, 0x1e, 0xfa, 0xab, 0x5e, 0x7f, 0x1d, 0xf2, 0xfb, 0x57, 0x33, 0x12, 0xe9,
	0x9c, 0x73, 0x1f, 0xaa, 0xb1, 0x10, 0x6c, 0xb4, 0xc0, 0xec, 0xc0, 0x70, 0x51, 0xa3, 0x1a, 0x55,
	0xd4, 0xf3, 0x10, 0x33, 0xe7, 0x1e, 0x54, 0x28, 0x97, 0xda, 0x31, 0x5d, 0xd4, 0x30, 0xa3, 0x32,
	0xe5, 0x52, 0x19, 0xc7, 0x00, 0x13, 0x91, 0xc5, 0x8c, 0x68, 0xcf, 0x72, 0x51, 0x03, 0x45, 0xb5,
	0x5c, 0xf9, 0x6d, 0xcf, 0x65, 0x4a, 0x79, 0xa2, 0xed, 0x1d, 0x17, 0x35, 0xf6, 0xa2, 0x5a, 0xae,
	0x28, 0xfb, 0x01, 0xec, 0x4b, 0x3a, 0x25, 0x23, 0x8e, 0xb9, 0x98, 0xeb, 0x48, 0x59, 0xb7, 0xef,
	0x29, 0x35, 0x54, 0xe2, 0x10, 0x33, 0x6f, 0x08, 0x96, 0xfa, 0x97, 0xce, 0x7f, 0xb0, 0x3b, 0x08,
	0x5f, 0x85, 0xbd, 0xb7, 0x61, 0xff, 0xdd, 0xeb, 0xb6, 0x5d, 0x72, 0xaa, 0x60, 0x85, 0x83, 0x6e,
	0xd7, 0x46, 0xea, 0xd4, 0xea, 0xf5, 0xba, 0xb6, 0xe1, 0x54, 0xc0, 0xec, 0x84, 0x7d, 0xdb, 0x74,
	0x00, 0xca, 0x2f, 0x7a, 0x83, 0x56, 0xb7, 0x6d, 0x5b, 0xea, 0xfc, 0xa6, 0x1f, 0x75, 0xc2, 0x97,
	0xf6, 0x8e, 0x8a, 0xf6, 0x3b, 0x17, 0x6d, 0xbb, 0xec, 0x25, 0xe0, 0xf4, 0x66, 0x92, 0x0a, 0x8e,
	0x59, 0x81, 0xda, 0x11, 0x54, 0xb9, 0x18, 0xe9, 0x41, 0x34, 0xb9, 0xea, 0x79, 0x29, 0xaa, 0x70,
	0x91, 0x9b, 0x0f, 0xc1, 0x9a, 0x60, 0x89, 0x35, 0x9e, 0xdd, 0xe6, 0x9d, 0x5b, 0x91, 0x9e, 0x97,
	0x22, 0x1d, 0x6a, 0x55, 0x60, 0x47, 0xd7, 0x78, 0xdf, 0x11, 0xec, 0x9e, 0x51, 0x26, 0x49, 0x9a,
	0xb7, 0x04, 0x1b, 0xc3, 0x1c, 0x6d, 0xb4, 0xac, 0x52, 0x7f, 0xb9, 0xcc, 0x31, 0x00, 0xcf, 0xa6,
	0x31, 0x49, 0x57, 0xe3, 0xa0, 0xa8, 0x96, 0x2b, 0x37, 0x07, 0x50, 0xfb, 0xd4, 0x0a, 0x03, 0x78,
	0xcf, 0xb7, 0xa0, 0xd5, 0x40, 0x91, 0x62, 0x17, 0x0e, 0x2e, 0x5a, 0xed, 0xc8, 0x36, 0x0a, 0x1c,
	0x4d, 0x8f, 0xc2, 0xff, 0x6b, 0x7a, 0xeb, 0xbb, 0x6d, 0xc5, 0xf7, 0x68, 0x03, 0xdf, 0xdd, 0xdb,
	0x2f, 0x7e, 0x93, 0xdf, 0x17, 0x04, 0xf6, 0x29, 0x66, 0xe3, 0x8c, 0x61, 0xf5, 0x83, 0x79, 0xd7,
	0xd3, 0x0d, 0x88, 0x6e, 0xa1, 0xeb, 0x7a, 0xb4, 0x48, 0x72, 0x13, 0x97, 0xb1, 0x1d, 0x97, 0x79,
	0x1d, 0x57, 0xf0, 0x27, 0x5c, 0x6b, 0x48, 0xa8, 0x00, 0xc9, 0x68, 0x75, 0xbe, 0x2e, 0xeb, 0xe8,
	0xdb, 0xb2, 0x8e, 0x7e, 0x2c, 0xeb, 0xe8, 0xd3, 0xcf, 0x7a, 0xe9, 0xfd, 0xb3, 0x7f, 0xfc, 0x44,
	0xc4, 0x65, 0x2d, 0x3c, 0xf9, 0x15, 0x00, 0x00, 0xff, 0xff, 0x15, 0xb8, 0x67, 0x31, 0x64, 0x04,
	0x00, 0x00,
}
