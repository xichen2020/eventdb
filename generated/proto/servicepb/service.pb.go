// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/xichen2020/eventdb/generated/proto/servicepb/service.proto

package servicepb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type HealthRequest struct {
}

func (m *HealthRequest) Reset()                    { *m = HealthRequest{} }
func (m *HealthRequest) String() string            { return proto.CompactTextString(m) }
func (*HealthRequest) ProtoMessage()               {}
func (*HealthRequest) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{0} }

type HealthResult struct {
	IsHealthy bool   `protobuf:"varint,1,opt,name=is_healthy,json=isHealthy,proto3" json:"is_healthy,omitempty"`
	StatusMsg string `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`
}

func (m *HealthResult) Reset()                    { *m = HealthResult{} }
func (m *HealthResult) String() string            { return proto.CompactTextString(m) }
func (*HealthResult) ProtoMessage()               {}
func (*HealthResult) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{1} }

func (m *HealthResult) GetIsHealthy() bool {
	if m != nil {
		return m.IsHealthy
	}
	return false
}

func (m *HealthResult) GetStatusMsg() string {
	if m != nil {
		return m.StatusMsg
	}
	return ""
}

type WriteRequest struct {
	Namespace []byte     `protobuf:"bytes,1,opt,name=Namespace,json=namespace,proto3" json:"Namespace,omitempty"`
	Docs      []Document `protobuf:"bytes,2,rep,name=docs" json:"docs"`
}

func (m *WriteRequest) Reset()                    { *m = WriteRequest{} }
func (m *WriteRequest) String() string            { return proto.CompactTextString(m) }
func (*WriteRequest) ProtoMessage()               {}
func (*WriteRequest) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{2} }

func (m *WriteRequest) GetNamespace() []byte {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *WriteRequest) GetDocs() []Document {
	if m != nil {
		return m.Docs
	}
	return nil
}

type WriteResults struct {
}

func (m *WriteResults) Reset()                    { *m = WriteResults{} }
func (m *WriteResults) String() string            { return proto.CompactTextString(m) }
func (*WriteResults) ProtoMessage()               {}
func (*WriteResults) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{3} }

type RawQueryResults struct {
	Raw []string `protobuf:"bytes,1,rep,name=raw" json:"raw,omitempty"`
}

func (m *RawQueryResults) Reset()                    { *m = RawQueryResults{} }
func (m *RawQueryResults) String() string            { return proto.CompactTextString(m) }
func (*RawQueryResults) ProtoMessage()               {}
func (*RawQueryResults) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{4} }

func (m *RawQueryResults) GetRaw() []string {
	if m != nil {
		return m.Raw
	}
	return nil
}

type SingleKeyGroupQueryResult struct {
	Key    FieldValue         `protobuf:"bytes,1,opt,name=key" json:"key"`
	Values []CalculationValue `protobuf:"bytes,2,rep,name=values" json:"values"`
}

func (m *SingleKeyGroupQueryResult) Reset()                    { *m = SingleKeyGroupQueryResult{} }
func (m *SingleKeyGroupQueryResult) String() string            { return proto.CompactTextString(m) }
func (*SingleKeyGroupQueryResult) ProtoMessage()               {}
func (*SingleKeyGroupQueryResult) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{5} }

func (m *SingleKeyGroupQueryResult) GetKey() FieldValue {
	if m != nil {
		return m.Key
	}
	return FieldValue{}
}

func (m *SingleKeyGroupQueryResult) GetValues() []CalculationValue {
	if m != nil {
		return m.Values
	}
	return nil
}

type SingleKeyGroupQueryResults struct {
	Groups []SingleKeyGroupQueryResult `protobuf:"bytes,1,rep,name=groups" json:"groups"`
}

func (m *SingleKeyGroupQueryResults) Reset()         { *m = SingleKeyGroupQueryResults{} }
func (m *SingleKeyGroupQueryResults) String() string { return proto.CompactTextString(m) }
func (*SingleKeyGroupQueryResults) ProtoMessage()    {}
func (*SingleKeyGroupQueryResults) Descriptor() ([]byte, []int) {
	return fileDescriptorService, []int{6}
}

func (m *SingleKeyGroupQueryResults) GetGroups() []SingleKeyGroupQueryResult {
	if m != nil {
		return m.Groups
	}
	return nil
}

type MultiKeyGroupQueryResult struct {
	Key    []FieldValue       `protobuf:"bytes,1,rep,name=key" json:"key"`
	Values []CalculationValue `protobuf:"bytes,2,rep,name=values" json:"values"`
}

func (m *MultiKeyGroupQueryResult) Reset()                    { *m = MultiKeyGroupQueryResult{} }
func (m *MultiKeyGroupQueryResult) String() string            { return proto.CompactTextString(m) }
func (*MultiKeyGroupQueryResult) ProtoMessage()               {}
func (*MultiKeyGroupQueryResult) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{7} }

func (m *MultiKeyGroupQueryResult) GetKey() []FieldValue {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *MultiKeyGroupQueryResult) GetValues() []CalculationValue {
	if m != nil {
		return m.Values
	}
	return nil
}

type MultiKeyGroupQueryResults struct {
	Groups []MultiKeyGroupQueryResult `protobuf:"bytes,1,rep,name=groups" json:"groups"`
}

func (m *MultiKeyGroupQueryResults) Reset()                    { *m = MultiKeyGroupQueryResults{} }
func (m *MultiKeyGroupQueryResults) String() string            { return proto.CompactTextString(m) }
func (*MultiKeyGroupQueryResults) ProtoMessage()               {}
func (*MultiKeyGroupQueryResults) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{8} }

func (m *MultiKeyGroupQueryResults) GetGroups() []MultiKeyGroupQueryResult {
	if m != nil {
		return m.Groups
	}
	return nil
}

type GroupedQueryResults struct {
	// Types that are valid to be assigned to Results:
	//	*GroupedQueryResults_SingleKey
	//	*GroupedQueryResults_MultiKey
	Results isGroupedQueryResults_Results `protobuf_oneof:"results"`
}

func (m *GroupedQueryResults) Reset()                    { *m = GroupedQueryResults{} }
func (m *GroupedQueryResults) String() string            { return proto.CompactTextString(m) }
func (*GroupedQueryResults) ProtoMessage()               {}
func (*GroupedQueryResults) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{9} }

type isGroupedQueryResults_Results interface {
	isGroupedQueryResults_Results()
	MarshalTo([]byte) (int, error)
	Size() int
}

type GroupedQueryResults_SingleKey struct {
	SingleKey *SingleKeyGroupQueryResults `protobuf:"bytes,1,opt,name=single_key,json=singleKey,oneof"`
}
type GroupedQueryResults_MultiKey struct {
	MultiKey *MultiKeyGroupQueryResults `protobuf:"bytes,2,opt,name=multi_key,json=multiKey,oneof"`
}

func (*GroupedQueryResults_SingleKey) isGroupedQueryResults_Results() {}
func (*GroupedQueryResults_MultiKey) isGroupedQueryResults_Results()  {}

func (m *GroupedQueryResults) GetResults() isGroupedQueryResults_Results {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *GroupedQueryResults) GetSingleKey() *SingleKeyGroupQueryResults {
	if x, ok := m.GetResults().(*GroupedQueryResults_SingleKey); ok {
		return x.SingleKey
	}
	return nil
}

func (m *GroupedQueryResults) GetMultiKey() *MultiKeyGroupQueryResults {
	if x, ok := m.GetResults().(*GroupedQueryResults_MultiKey); ok {
		return x.MultiKey
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GroupedQueryResults) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GroupedQueryResults_OneofMarshaler, _GroupedQueryResults_OneofUnmarshaler, _GroupedQueryResults_OneofSizer, []interface{}{
		(*GroupedQueryResults_SingleKey)(nil),
		(*GroupedQueryResults_MultiKey)(nil),
	}
}

func _GroupedQueryResults_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GroupedQueryResults)
	// results
	switch x := m.Results.(type) {
	case *GroupedQueryResults_SingleKey:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SingleKey); err != nil {
			return err
		}
	case *GroupedQueryResults_MultiKey:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MultiKey); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GroupedQueryResults.Results has unexpected type %T", x)
	}
	return nil
}

func _GroupedQueryResults_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GroupedQueryResults)
	switch tag {
	case 1: // results.single_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SingleKeyGroupQueryResults)
		err := b.DecodeMessage(msg)
		m.Results = &GroupedQueryResults_SingleKey{msg}
		return true, err
	case 2: // results.multi_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MultiKeyGroupQueryResults)
		err := b.DecodeMessage(msg)
		m.Results = &GroupedQueryResults_MultiKey{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GroupedQueryResults_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GroupedQueryResults)
	// results
	switch x := m.Results.(type) {
	case *GroupedQueryResults_SingleKey:
		s := proto.Size(x.SingleKey)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GroupedQueryResults_MultiKey:
		s := proto.Size(x.MultiKey)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TimeBucketQueryResult struct {
	StartAtNanos int64 `protobuf:"varint,1,opt,name=start_at_nanos,json=startAtNanos,proto3" json:"start_at_nanos,omitempty"`
	Value        int64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *TimeBucketQueryResult) Reset()                    { *m = TimeBucketQueryResult{} }
func (m *TimeBucketQueryResult) String() string            { return proto.CompactTextString(m) }
func (*TimeBucketQueryResult) ProtoMessage()               {}
func (*TimeBucketQueryResult) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{10} }

func (m *TimeBucketQueryResult) GetStartAtNanos() int64 {
	if m != nil {
		return m.StartAtNanos
	}
	return 0
}

func (m *TimeBucketQueryResult) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type TimeBucketQueryResults struct {
	GranularityNanos int64                   `protobuf:"varint,1,opt,name=granularity_nanos,json=granularityNanos,proto3" json:"granularity_nanos,omitempty"`
	Buckets          []TimeBucketQueryResult `protobuf:"bytes,2,rep,name=buckets" json:"buckets"`
}

func (m *TimeBucketQueryResults) Reset()                    { *m = TimeBucketQueryResults{} }
func (m *TimeBucketQueryResults) String() string            { return proto.CompactTextString(m) }
func (*TimeBucketQueryResults) ProtoMessage()               {}
func (*TimeBucketQueryResults) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{11} }

func (m *TimeBucketQueryResults) GetGranularityNanos() int64 {
	if m != nil {
		return m.GranularityNanos
	}
	return 0
}

func (m *TimeBucketQueryResults) GetBuckets() []TimeBucketQueryResult {
	if m != nil {
		return m.Buckets
	}
	return nil
}

func init() {
	proto.RegisterType((*HealthRequest)(nil), "servicepb.HealthRequest")
	proto.RegisterType((*HealthResult)(nil), "servicepb.HealthResult")
	proto.RegisterType((*WriteRequest)(nil), "servicepb.WriteRequest")
	proto.RegisterType((*WriteResults)(nil), "servicepb.WriteResults")
	proto.RegisterType((*RawQueryResults)(nil), "servicepb.RawQueryResults")
	proto.RegisterType((*SingleKeyGroupQueryResult)(nil), "servicepb.SingleKeyGroupQueryResult")
	proto.RegisterType((*SingleKeyGroupQueryResults)(nil), "servicepb.SingleKeyGroupQueryResults")
	proto.RegisterType((*MultiKeyGroupQueryResult)(nil), "servicepb.MultiKeyGroupQueryResult")
	proto.RegisterType((*MultiKeyGroupQueryResults)(nil), "servicepb.MultiKeyGroupQueryResults")
	proto.RegisterType((*GroupedQueryResults)(nil), "servicepb.GroupedQueryResults")
	proto.RegisterType((*TimeBucketQueryResult)(nil), "servicepb.TimeBucketQueryResult")
	proto.RegisterType((*TimeBucketQueryResults)(nil), "servicepb.TimeBucketQueryResults")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Eventdb service

type EventdbClient interface {
	// Health returns the db health status.
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResult, error)
	// Write writes a list of documents.
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResults, error)
	// QueryRaw performs a raw query.
	QueryRaw(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*RawQueryResults, error)
	// QueryGrouped performs a grouped query.
	QueryGrouped(ctx context.Context, in *GroupedQuery, opts ...grpc.CallOption) (*GroupedQueryResults, error)
	// QueryTimeBucket performs a time bucket query.
	QueryTimeBucket(ctx context.Context, in *TimeBucketQuery, opts ...grpc.CallOption) (*TimeBucketQueryResults, error)
}

type eventdbClient struct {
	cc *grpc.ClientConn
}

func NewEventdbClient(cc *grpc.ClientConn) EventdbClient {
	return &eventdbClient{cc}
}

func (c *eventdbClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResult, error) {
	out := new(HealthResult)
	err := grpc.Invoke(ctx, "/servicepb.eventdb/Health", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventdbClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResults, error) {
	out := new(WriteResults)
	err := grpc.Invoke(ctx, "/servicepb.eventdb/Write", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventdbClient) QueryRaw(ctx context.Context, in *RawQuery, opts ...grpc.CallOption) (*RawQueryResults, error) {
	out := new(RawQueryResults)
	err := grpc.Invoke(ctx, "/servicepb.eventdb/QueryRaw", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventdbClient) QueryGrouped(ctx context.Context, in *GroupedQuery, opts ...grpc.CallOption) (*GroupedQueryResults, error) {
	out := new(GroupedQueryResults)
	err := grpc.Invoke(ctx, "/servicepb.eventdb/QueryGrouped", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventdbClient) QueryTimeBucket(ctx context.Context, in *TimeBucketQuery, opts ...grpc.CallOption) (*TimeBucketQueryResults, error) {
	out := new(TimeBucketQueryResults)
	err := grpc.Invoke(ctx, "/servicepb.eventdb/QueryTimeBucket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Eventdb service

type EventdbServer interface {
	// Health returns the db health status.
	Health(context.Context, *HealthRequest) (*HealthResult, error)
	// Write writes a list of documents.
	Write(context.Context, *WriteRequest) (*WriteResults, error)
	// QueryRaw performs a raw query.
	QueryRaw(context.Context, *RawQuery) (*RawQueryResults, error)
	// QueryGrouped performs a grouped query.
	QueryGrouped(context.Context, *GroupedQuery) (*GroupedQueryResults, error)
	// QueryTimeBucket performs a time bucket query.
	QueryTimeBucket(context.Context, *TimeBucketQuery) (*TimeBucketQueryResults, error)
}

func RegisterEventdbServer(s *grpc.Server, srv EventdbServer) {
	s.RegisterService(&_Eventdb_serviceDesc, srv)
}

func _Eventdb_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventdbServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicepb.eventdb/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventdbServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eventdb_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventdbServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicepb.eventdb/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventdbServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eventdb_QueryRaw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventdbServer).QueryRaw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicepb.eventdb/QueryRaw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventdbServer).QueryRaw(ctx, req.(*RawQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eventdb_QueryGrouped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupedQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventdbServer).QueryGrouped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicepb.eventdb/QueryGrouped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventdbServer).QueryGrouped(ctx, req.(*GroupedQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eventdb_QueryTimeBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeBucketQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventdbServer).QueryTimeBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicepb.eventdb/QueryTimeBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventdbServer).QueryTimeBucket(ctx, req.(*TimeBucketQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _Eventdb_serviceDesc = grpc.ServiceDesc{
	ServiceName: "servicepb.eventdb",
	HandlerType: (*EventdbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _Eventdb_Health_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _Eventdb_Write_Handler,
		},
		{
			MethodName: "QueryRaw",
			Handler:    _Eventdb_QueryRaw_Handler,
		},
		{
			MethodName: "QueryGrouped",
			Handler:    _Eventdb_QueryGrouped_Handler,
		},
		{
			MethodName: "QueryTimeBucket",
			Handler:    _Eventdb_QueryTimeBucket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/xichen2020/eventdb/generated/proto/servicepb/service.proto",
}

func (m *HealthRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *HealthResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsHealthy {
		dAtA[i] = 0x8
		i++
		if m.IsHealthy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.StatusMsg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.StatusMsg)))
		i += copy(dAtA[i:], m.StatusMsg)
	}
	return i, nil
}

func (m *WriteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WriteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Docs) > 0 {
		for _, msg := range m.Docs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *WriteResults) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WriteResults) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RawQueryResults) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawQueryResults) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Raw) > 0 {
		for _, s := range m.Raw {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *SingleKeyGroupQueryResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SingleKeyGroupQueryResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintService(dAtA, i, uint64(m.Key.Size()))
	n1, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Values) > 0 {
		for _, msg := range m.Values {
			dAtA[i] = 0x12
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SingleKeyGroupQueryResults) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SingleKeyGroupQueryResults) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			dAtA[i] = 0xa
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MultiKeyGroupQueryResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiKeyGroupQueryResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		for _, msg := range m.Key {
			dAtA[i] = 0xa
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Values) > 0 {
		for _, msg := range m.Values {
			dAtA[i] = 0x12
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MultiKeyGroupQueryResults) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiKeyGroupQueryResults) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			dAtA[i] = 0xa
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GroupedQueryResults) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupedQueryResults) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Results != nil {
		nn2, err := m.Results.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	return i, nil
}

func (m *GroupedQueryResults_SingleKey) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SingleKey != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(m.SingleKey.Size()))
		n3, err := m.SingleKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *GroupedQueryResults_MultiKey) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MultiKey != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.MultiKey.Size()))
		n4, err := m.MultiKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *TimeBucketQueryResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeBucketQueryResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartAtNanos != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.StartAtNanos))
	}
	if m.Value != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *TimeBucketQueryResults) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeBucketQueryResults) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GranularityNanos != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.GranularityNanos))
	}
	if len(m.Buckets) > 0 {
		for _, msg := range m.Buckets {
			dAtA[i] = 0x12
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HealthRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *HealthResult) Size() (n int) {
	var l int
	_ = l
	if m.IsHealthy {
		n += 2
	}
	l = len(m.StatusMsg)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *WriteRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Docs) > 0 {
		for _, e := range m.Docs {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *WriteResults) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RawQueryResults) Size() (n int) {
	var l int
	_ = l
	if len(m.Raw) > 0 {
		for _, s := range m.Raw {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *SingleKeyGroupQueryResult) Size() (n int) {
	var l int
	_ = l
	l = m.Key.Size()
	n += 1 + l + sovService(uint64(l))
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *SingleKeyGroupQueryResults) Size() (n int) {
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *MultiKeyGroupQueryResult) Size() (n int) {
	var l int
	_ = l
	if len(m.Key) > 0 {
		for _, e := range m.Key {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *MultiKeyGroupQueryResults) Size() (n int) {
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *GroupedQueryResults) Size() (n int) {
	var l int
	_ = l
	if m.Results != nil {
		n += m.Results.Size()
	}
	return n
}

func (m *GroupedQueryResults_SingleKey) Size() (n int) {
	var l int
	_ = l
	if m.SingleKey != nil {
		l = m.SingleKey.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}
func (m *GroupedQueryResults_MultiKey) Size() (n int) {
	var l int
	_ = l
	if m.MultiKey != nil {
		l = m.MultiKey.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}
func (m *TimeBucketQueryResult) Size() (n int) {
	var l int
	_ = l
	if m.StartAtNanos != 0 {
		n += 1 + sovService(uint64(m.StartAtNanos))
	}
	if m.Value != 0 {
		n += 1 + sovService(uint64(m.Value))
	}
	return n
}

func (m *TimeBucketQueryResults) Size() (n int) {
	var l int
	_ = l
	if m.GranularityNanos != 0 {
		n += 1 + sovService(uint64(m.GranularityNanos))
	}
	if len(m.Buckets) > 0 {
		for _, e := range m.Buckets {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func sovService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HealthRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHealthy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsHealthy = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WriteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WriteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WriteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = append(m.Namespace[:0], dAtA[iNdEx:postIndex]...)
			if m.Namespace == nil {
				m.Namespace = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Docs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Docs = append(m.Docs, Document{})
			if err := m.Docs[len(m.Docs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WriteResults) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WriteResults: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WriteResults: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawQueryResults) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawQueryResults: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawQueryResults: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Raw = append(m.Raw, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SingleKeyGroupQueryResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleKeyGroupQueryResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleKeyGroupQueryResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, CalculationValue{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SingleKeyGroupQueryResults) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleKeyGroupQueryResults: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleKeyGroupQueryResults: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, SingleKeyGroupQueryResult{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiKeyGroupQueryResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiKeyGroupQueryResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiKeyGroupQueryResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key, FieldValue{})
			if err := m.Key[len(m.Key)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, CalculationValue{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiKeyGroupQueryResults) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiKeyGroupQueryResults: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiKeyGroupQueryResults: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, MultiKeyGroupQueryResult{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupedQueryResults) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupedQueryResults: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupedQueryResults: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SingleKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SingleKeyGroupQueryResults{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Results = &GroupedQueryResults_SingleKey{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MultiKeyGroupQueryResults{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Results = &GroupedQueryResults_MultiKey{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeBucketQueryResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeBucketQueryResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeBucketQueryResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAtNanos", wireType)
			}
			m.StartAtNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartAtNanos |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeBucketQueryResults) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeBucketQueryResults: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeBucketQueryResults: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GranularityNanos", wireType)
			}
			m.GranularityNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GranularityNanos |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buckets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buckets = append(m.Buckets, TimeBucketQueryResult{})
			if err := m.Buckets[len(m.Buckets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/xichen2020/eventdb/generated/proto/servicepb/service.proto", fileDescriptorService)
}

var fileDescriptorService = []byte{
	// 708 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0x5f, 0x4f, 0x13, 0x4f,
	0x14, 0xed, 0x76, 0xa1, 0xb0, 0x97, 0xfe, 0x80, 0xdf, 0x20, 0x5a, 0x56, 0xad, 0x75, 0xc1, 0xa4,
	0x89, 0xa1, 0x25, 0xf5, 0xc1, 0x18, 0x43, 0x22, 0x45, 0x11, 0xa2, 0x90, 0xb8, 0x18, 0x4d, 0x34,
	0xb1, 0x4e, 0xb7, 0xe3, 0x76, 0xc3, 0xfe, 0x29, 0x3b, 0x33, 0x60, 0xdf, 0x35, 0xbe, 0xfa, 0x45,
	0xfc, 0x1e, 0x3c, 0xfa, 0x09, 0x8c, 0x81, 0x2f, 0x62, 0x76, 0x76, 0x97, 0x4e, 0x49, 0x57, 0x49,
	0x8d, 0x6f, 0xbb, 0xe7, 0xde, 0x73, 0xf6, 0xdc, 0x33, 0xd3, 0x5b, 0x78, 0x62, 0x3b, 0xac, 0xcb,
	0xdb, 0x35, 0x2b, 0xf0, 0xea, 0x1f, 0x1d, 0xab, 0x4b, 0xfc, 0xc6, 0x5a, 0x63, 0xad, 0x4e, 0x8e,
	0x88, 0xcf, 0x3a, 0xed, 0xba, 0x4d, 0x7c, 0x12, 0x62, 0x46, 0x3a, 0xf5, 0x5e, 0x18, 0xb0, 0xa0,
	0x4e, 0x49, 0x78, 0xe4, 0x58, 0xa4, 0xd7, 0x4e, 0x9f, 0x6a, 0x02, 0x47, 0xda, 0x79, 0x41, 0x5f,
	0x95, 0x14, 0xed, 0xc0, 0x0e, 0x62, 0x66, 0x9b, 0x7f, 0x10, 0x6f, 0xb1, 0x4c, 0xf4, 0x14, 0x33,
	0xf5, 0xad, 0x71, 0x0d, 0x74, 0x02, 0x8b, 0x7b, 0xc4, 0x67, 0x89, 0xce, 0xe6, 0xb8, 0x3a, 0x87,
	0x9c, 0x84, 0xfd, 0xbf, 0x15, 0x39, 0xc2, 0x2e, 0x4f, 0xb2, 0x30, 0xe6, 0xe0, 0xbf, 0x6d, 0x82,
	0x5d, 0xd6, 0x35, 0xc9, 0x21, 0x27, 0x94, 0x19, 0xcf, 0xa1, 0x98, 0x02, 0x94, 0xbb, 0x0c, 0xdd,
	0x04, 0x70, 0x68, 0xab, 0x2b, 0xa0, 0x7e, 0x49, 0xa9, 0x28, 0xd5, 0x69, 0x53, 0x73, 0x68, 0xdc,
	0xd3, 0x8f, 0xca, 0x94, 0x61, 0xc6, 0x69, 0xcb, 0xa3, 0x76, 0x29, 0x5f, 0x51, 0xaa, 0x9a, 0xa9,
	0xc5, 0xc8, 0x2e, 0xb5, 0x8d, 0xb7, 0x50, 0x7c, 0x1d, 0x3a, 0x8c, 0x24, 0xea, 0xe8, 0x06, 0x68,
	0x7b, 0xd8, 0x23, 0xb4, 0x87, 0x2d, 0x22, 0xc4, 0x8a, 0xa6, 0xe6, 0xa7, 0x00, 0x5a, 0x85, 0x89,
	0x4e, 0x60, 0xd1, 0x52, 0xbe, 0xa2, 0x56, 0x67, 0x1a, 0x0b, 0xb5, 0x73, 0xcb, 0xb5, 0xc7, 0x49,
	0x7e, 0xcd, 0x89, 0x93, 0x1f, 0xb7, 0x72, 0xa6, 0x68, 0x33, 0x66, 0xcf, 0xc5, 0x23, 0xa7, 0xd4,
	0x58, 0x86, 0x39, 0x13, 0x1f, 0xbf, 0x88, 0x22, 0x4a, 0x20, 0x34, 0x0f, 0x6a, 0x88, 0x8f, 0x4b,
	0x4a, 0x45, 0xad, 0x6a, 0x66, 0xf4, 0x68, 0x7c, 0x56, 0x60, 0x69, 0xdf, 0xf1, 0x6d, 0x97, 0x3c,
	0x23, 0xfd, 0xa7, 0x61, 0xc0, 0x7b, 0x12, 0x01, 0xad, 0x82, 0x7a, 0x40, 0xe2, 0x31, 0x67, 0x1a,
	0x8b, 0x92, 0x81, 0x2d, 0x87, 0xb8, 0x9d, 0x57, 0x51, 0x70, 0x89, 0x85, 0xa8, 0x0f, 0x3d, 0x80,
	0x82, 0x08, 0x33, 0xb5, 0x7c, 0x5d, 0x62, 0x6c, 0x62, 0xd7, 0xe2, 0x2e, 0x66, 0x4e, 0xe0, 0xcb,
	0xbc, 0x84, 0x60, 0xbc, 0x07, 0x3d, 0xd3, 0x06, 0x45, 0x4d, 0x28, 0xd8, 0x11, 0x48, 0x85, 0xf5,
	0x99, 0xc6, 0x8a, 0x24, 0x9c, 0x49, 0x4b, 0xbf, 0x10, 0x33, 0x8d, 0x4f, 0x0a, 0x94, 0x76, 0xb9,
	0xcb, 0x9c, 0xdf, 0x0e, 0xaa, 0xfe, 0xeb, 0x41, 0xdf, 0xc1, 0x52, 0x96, 0x0b, 0x8a, 0x36, 0x2e,
	0xcc, 0xb9, 0x2c, 0xe9, 0x66, 0xb1, 0x2e, 0x8c, 0xf9, 0x4d, 0x81, 0x05, 0xd1, 0x42, 0x3a, 0x43,
	0xd2, 0x5b, 0x00, 0x54, 0x24, 0xd5, 0x1a, 0x9c, 0xe8, 0x9d, 0xcb, 0xc4, 0x48, 0xb7, 0x73, 0xa6,
	0x46, 0xd3, 0x2a, 0xda, 0x04, 0xcd, 0x8b, 0x9c, 0x08, 0x99, 0xbc, 0x90, 0x59, 0xb9, 0x84, 0xcb,
	0x48, 0x65, 0xda, 0x4b, 0x8a, 0x4d, 0x0d, 0xa6, 0xc2, 0xe4, 0x96, 0xee, 0xc3, 0xe2, 0x4b, 0xc7,
	0x23, 0x4d, 0x6e, 0x1d, 0x10, 0x26, 0x1f, 0xc9, 0x0a, 0xcc, 0x52, 0x86, 0x43, 0xd6, 0xc2, 0xac,
	0xe5, 0x63, 0x3f, 0xa0, 0xc2, 0xb4, 0x6a, 0x16, 0x05, 0xba, 0xc1, 0xf6, 0x22, 0x0c, 0x5d, 0x81,
	0x49, 0x11, 0xac, 0xb0, 0xa2, 0x9a, 0xf1, 0x8b, 0xf1, 0x45, 0x81, 0xab, 0x23, 0x55, 0x29, 0xba,
	0x0b, 0xff, 0xdb, 0x21, 0xf6, 0xb9, 0x8b, 0x43, 0x87, 0xf5, 0x87, 0x94, 0xe7, 0xa5, 0x42, 0xac,
	0xfe, 0x08, 0xa6, 0xda, 0x42, 0x22, 0x3d, 0xe8, 0x8a, 0x34, 0xea, 0xc8, 0x0f, 0x24, 0xa7, 0x91,
	0xd2, 0x1a, 0x67, 0x79, 0x98, 0x4a, 0x56, 0x10, 0x5a, 0x87, 0x42, 0xbc, 0x27, 0x50, 0x49, 0x92,
	0x19, 0xda, 0x37, 0xfa, 0xb5, 0x11, 0x95, 0x48, 0xd7, 0xc8, 0xa1, 0x87, 0x30, 0x29, 0x7e, 0xdf,
	0x48, 0xee, 0x91, 0xd7, 0x89, 0x3e, 0xa2, 0x10, 0x87, 0x9c, 0x43, 0xeb, 0x30, 0x1d, 0xbb, 0xc4,
	0xc7, 0x48, 0xde, 0x24, 0xe9, 0x86, 0xd0, 0xf5, 0x11, 0xe0, 0x80, 0xbe, 0x03, 0x45, 0x81, 0x24,
	0x37, 0x6b, 0xc8, 0x82, 0x7c, 0xdb, 0xf4, 0x72, 0x46, 0x61, 0x20, 0x65, 0xc2, 0x9c, 0x40, 0x06,
	0xf1, 0x21, 0x3d, 0x3b, 0x55, 0xfd, 0xf6, 0x9f, 0x12, 0xa7, 0x46, 0xae, 0xb9, 0x73, 0x72, 0x5a,
	0x56, 0xbe, 0x9f, 0x96, 0x95, 0x9f, 0xa7, 0x65, 0xe5, 0xeb, 0x59, 0x39, 0xf7, 0xe6, 0xfe, 0x98,
	0xff, 0x06, 0xed, 0x82, 0x00, 0xee, 0xfd, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x32, 0xad, 0x45,
	0x5d, 0x07, 0x00, 0x00,
}
