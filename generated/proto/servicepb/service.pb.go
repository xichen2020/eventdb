// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/xichen2020/eventdb/generated/proto/servicepb/service.proto

/*
	Package servicepb is a generated protocol buffer package.

	It is generated from these files:
		github.com/xichen2020/eventdb/generated/proto/servicepb/service.proto

	It has these top-level messages:
		FieldValue
		Field
		Document
		Documents
		WriteResponse
*/
package servicepb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type FieldValue_Type int32

const (
	FieldValue_UNKNOWN FieldValue_Type = 0
	FieldValue_NULL    FieldValue_Type = 1
	FieldValue_BOOL    FieldValue_Type = 2
	FieldValue_INT     FieldValue_Type = 3
	FieldValue_DOUBLE  FieldValue_Type = 4
	FieldValue_STRING  FieldValue_Type = 5
	FieldValue_TIME    FieldValue_Type = 6
)

var FieldValue_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "NULL",
	2: "BOOL",
	3: "INT",
	4: "DOUBLE",
	5: "STRING",
	6: "TIME",
}
var FieldValue_Type_value = map[string]int32{
	"UNKNOWN": 0,
	"NULL":    1,
	"BOOL":    2,
	"INT":     3,
	"DOUBLE":  4,
	"STRING":  5,
	"TIME":    6,
}

func (x FieldValue_Type) String() string {
	return proto.EnumName(FieldValue_Type_name, int32(x))
}
func (FieldValue_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorService, []int{0, 0} }

type FieldValue struct {
	Type         FieldValue_Type `protobuf:"varint,1,opt,name=type,proto3,enum=servicepb.FieldValue_Type" json:"type,omitempty"`
	BoolVal      bool            `protobuf:"varint,2,opt,name=bool_val,json=boolVal,proto3" json:"bool_val,omitempty"`
	IntVal       int64           `protobuf:"varint,3,opt,name=int_val,json=intVal,proto3" json:"int_val,omitempty"`
	DoubleVal    float64         `protobuf:"fixed64,4,opt,name=double_val,json=doubleVal,proto3" json:"double_val,omitempty"`
	StringVal    []byte          `protobuf:"bytes,5,opt,name=string_val,json=stringVal,proto3" json:"string_val,omitempty"`
	TimeNanosVal int64           `protobuf:"varint,6,opt,name=time_nanos_val,json=timeNanosVal,proto3" json:"time_nanos_val,omitempty"`
}

func (m *FieldValue) Reset()                    { *m = FieldValue{} }
func (m *FieldValue) String() string            { return proto.CompactTextString(m) }
func (*FieldValue) ProtoMessage()               {}
func (*FieldValue) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{0} }

func (m *FieldValue) GetType() FieldValue_Type {
	if m != nil {
		return m.Type
	}
	return FieldValue_UNKNOWN
}

func (m *FieldValue) GetBoolVal() bool {
	if m != nil {
		return m.BoolVal
	}
	return false
}

func (m *FieldValue) GetIntVal() int64 {
	if m != nil {
		return m.IntVal
	}
	return 0
}

func (m *FieldValue) GetDoubleVal() float64 {
	if m != nil {
		return m.DoubleVal
	}
	return 0
}

func (m *FieldValue) GetStringVal() []byte {
	if m != nil {
		return m.StringVal
	}
	return nil
}

func (m *FieldValue) GetTimeNanosVal() int64 {
	if m != nil {
		return m.TimeNanosVal
	}
	return 0
}

type Field struct {
	Path  []string   `protobuf:"bytes,1,rep,name=path" json:"path,omitempty"`
	Value FieldValue `protobuf:"bytes,2,opt,name=value" json:"value"`
}

func (m *Field) Reset()                    { *m = Field{} }
func (m *Field) String() string            { return proto.CompactTextString(m) }
func (*Field) ProtoMessage()               {}
func (*Field) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{1} }

func (m *Field) GetPath() []string {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *Field) GetValue() FieldValue {
	if m != nil {
		return m.Value
	}
	return FieldValue{}
}

type Document struct {
	Id        []byte  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TimeNanos int64   `protobuf:"varint,2,opt,name=time_nanos,json=timeNanos,proto3" json:"time_nanos,omitempty"`
	RawData   []byte  `protobuf:"bytes,3,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
	Fields    []Field `protobuf:"bytes,4,rep,name=fields" json:"fields"`
}

func (m *Document) Reset()                    { *m = Document{} }
func (m *Document) String() string            { return proto.CompactTextString(m) }
func (*Document) ProtoMessage()               {}
func (*Document) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{2} }

func (m *Document) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Document) GetTimeNanos() int64 {
	if m != nil {
		return m.TimeNanos
	}
	return 0
}

func (m *Document) GetRawData() []byte {
	if m != nil {
		return m.RawData
	}
	return nil
}

func (m *Document) GetFields() []Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

type Documents struct {
	Namespace []byte     `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Docs      []Document `protobuf:"bytes,2,rep,name=docs" json:"docs"`
}

func (m *Documents) Reset()                    { *m = Documents{} }
func (m *Documents) String() string            { return proto.CompactTextString(m) }
func (*Documents) ProtoMessage()               {}
func (*Documents) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{3} }

func (m *Documents) GetNamespace() []byte {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *Documents) GetDocs() []Document {
	if m != nil {
		return m.Docs
	}
	return nil
}

// WriteResponse is the response to the Write call.
type WriteResponse struct {
}

func (m *WriteResponse) Reset()                    { *m = WriteResponse{} }
func (m *WriteResponse) String() string            { return proto.CompactTextString(m) }
func (*WriteResponse) ProtoMessage()               {}
func (*WriteResponse) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{4} }

func init() {
	proto.RegisterType((*FieldValue)(nil), "servicepb.FieldValue")
	proto.RegisterType((*Field)(nil), "servicepb.Field")
	proto.RegisterType((*Document)(nil), "servicepb.Document")
	proto.RegisterType((*Documents)(nil), "servicepb.Documents")
	proto.RegisterType((*WriteResponse)(nil), "servicepb.WriteResponse")
	proto.RegisterEnum("servicepb.FieldValue_Type", FieldValue_Type_name, FieldValue_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Eventdb service

type EventdbClient interface {
	// Write writes a list of documents.
	Write(ctx context.Context, in *Documents, opts ...grpc.CallOption) (*WriteResponse, error)
}

type eventdbClient struct {
	cc *grpc.ClientConn
}

func NewEventdbClient(cc *grpc.ClientConn) EventdbClient {
	return &eventdbClient{cc}
}

func (c *eventdbClient) Write(ctx context.Context, in *Documents, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := grpc.Invoke(ctx, "/servicepb.eventdb/Write", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Eventdb service

type EventdbServer interface {
	// Write writes a list of documents.
	Write(context.Context, *Documents) (*WriteResponse, error)
}

func RegisterEventdbServer(s *grpc.Server, srv EventdbServer) {
	s.RegisterService(&_Eventdb_serviceDesc, srv)
}

func _Eventdb_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Documents)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventdbServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicepb.eventdb/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventdbServer).Write(ctx, req.(*Documents))
	}
	return interceptor(ctx, in, info, handler)
}

var _Eventdb_serviceDesc = grpc.ServiceDesc{
	ServiceName: "servicepb.eventdb",
	HandlerType: (*EventdbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _Eventdb_Write_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/xichen2020/eventdb/generated/proto/servicepb/service.proto",
}

func (m *FieldValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Type))
	}
	if m.BoolVal {
		dAtA[i] = 0x10
		i++
		if m.BoolVal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IntVal != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintService(dAtA, i, uint64(m.IntVal))
	}
	if m.DoubleVal != 0 {
		dAtA[i] = 0x21
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DoubleVal))))
		i += 8
	}
	if len(m.StringVal) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.StringVal)))
		i += copy(dAtA[i:], m.StringVal)
	}
	if m.TimeNanosVal != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintService(dAtA, i, uint64(m.TimeNanosVal))
	}
	return i, nil
}

func (m *Field) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Field) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		for _, s := range m.Path {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintService(dAtA, i, uint64(m.Value.Size()))
	n1, err := m.Value.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *Document) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Document) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.TimeNanos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintService(dAtA, i, uint64(m.TimeNanos))
	}
	if len(m.RawData) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.RawData)))
		i += copy(dAtA[i:], m.RawData)
	}
	if len(m.Fields) > 0 {
		for _, msg := range m.Fields {
			dAtA[i] = 0x22
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Documents) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Documents) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Docs) > 0 {
		for _, msg := range m.Docs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *WriteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WriteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FieldValue) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovService(uint64(m.Type))
	}
	if m.BoolVal {
		n += 2
	}
	if m.IntVal != 0 {
		n += 1 + sovService(uint64(m.IntVal))
	}
	if m.DoubleVal != 0 {
		n += 9
	}
	l = len(m.StringVal)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.TimeNanosVal != 0 {
		n += 1 + sovService(uint64(m.TimeNanosVal))
	}
	return n
}

func (m *Field) Size() (n int) {
	var l int
	_ = l
	if len(m.Path) > 0 {
		for _, s := range m.Path {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	l = m.Value.Size()
	n += 1 + l + sovService(uint64(l))
	return n
}

func (m *Document) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.TimeNanos != 0 {
		n += 1 + sovService(uint64(m.TimeNanos))
	}
	l = len(m.RawData)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *Documents) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Docs) > 0 {
		for _, e := range m.Docs {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *WriteResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FieldValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (FieldValue_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolVal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoolVal = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntVal", wireType)
			}
			m.IntVal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IntVal |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoubleVal", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DoubleVal = float64(math.Float64frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringVal", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StringVal = append(m.StringVal[:0], dAtA[iNdEx:postIndex]...)
			if m.StringVal == nil {
				m.StringVal = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeNanosVal", wireType)
			}
			m.TimeNanosVal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeNanosVal |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Field) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Field: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Field: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = append(m.Path, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Document) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Document: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Document: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeNanos", wireType)
			}
			m.TimeNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeNanos |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawData = append(m.RawData[:0], dAtA[iNdEx:postIndex]...)
			if m.RawData == nil {
				m.RawData = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, Field{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Documents) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Documents: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Documents: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = append(m.Namespace[:0], dAtA[iNdEx:postIndex]...)
			if m.Namespace == nil {
				m.Namespace = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Docs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Docs = append(m.Docs, Document{})
			if err := m.Docs[len(m.Docs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WriteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WriteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WriteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/xichen2020/eventdb/generated/proto/servicepb/service.proto", fileDescriptorService)
}

var fileDescriptorService = []byte{
	// 548 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x41, 0x6e, 0xd3, 0x40,
	0x18, 0x85, 0x33, 0xb1, 0x63, 0xc7, 0x7f, 0x43, 0xb1, 0x06, 0x10, 0xa1, 0x82, 0x60, 0x59, 0x2c,
	0xbc, 0xa9, 0x53, 0xcc, 0x02, 0xb1, 0x8d, 0x52, 0x50, 0x44, 0x70, 0xa4, 0x21, 0x6d, 0x11, 0x9b,
	0x6a, 0x6c, 0x4f, 0x53, 0x4b, 0x8e, 0xc7, 0xb2, 0x27, 0x29, 0xdd, 0x73, 0x00, 0x8e, 0xc1, 0x51,
	0xba, 0xe4, 0x04, 0x08, 0x95, 0x8b, 0xa0, 0x19, 0xbb, 0x4d, 0x40, 0x5d, 0xb1, 0xfb, 0xe7, 0xbd,
	0x37, 0x5f, 0xfe, 0x79, 0x8a, 0xe1, 0x70, 0x91, 0x8a, 0xf3, 0x55, 0xe4, 0xc7, 0x7c, 0x39, 0xfc,
	0x92, 0xc6, 0xe7, 0x2c, 0x0f, 0x0e, 0x82, 0x83, 0x21, 0x5b, 0xb3, 0x5c, 0x24, 0xd1, 0x70, 0xc1,
	0x72, 0x56, 0x52, 0xc1, 0x92, 0x61, 0x51, 0x72, 0xc1, 0x87, 0x15, 0x2b, 0xd7, 0x69, 0xcc, 0x8a,
	0xe8, 0x66, 0xf2, 0x95, 0x8e, 0xad, 0x5b, 0x63, 0x6f, 0x7f, 0x8b, 0xb8, 0xe0, 0x0b, 0x5e, 0xdf,
	0x8c, 0x56, 0x67, 0xea, 0x54, 0x63, 0xe4, 0x54, 0xdf, 0x74, 0xbf, 0xb7, 0x01, 0xde, 0xa6, 0x2c,
	0x4b, 0x8e, 0x69, 0xb6, 0x62, 0xd8, 0x07, 0x5d, 0x5c, 0x16, 0xac, 0x8f, 0x1c, 0xe4, 0xed, 0x06,
	0x7b, 0xfe, 0x2d, 0xd7, 0xdf, 0x84, 0xfc, 0xf9, 0x65, 0xc1, 0x88, 0xca, 0xe1, 0x27, 0xd0, 0x8d,
	0x38, 0xcf, 0x4e, 0xd7, 0x34, 0xeb, 0xb7, 0x1d, 0xe4, 0x75, 0x89, 0x29, 0xcf, 0xc7, 0x34, 0xc3,
	0x8f, 0xc1, 0x4c, 0x73, 0xa1, 0x1c, 0xcd, 0x41, 0x9e, 0x46, 0x8c, 0x34, 0x17, 0xd2, 0x78, 0x06,
	0x90, 0xf0, 0x55, 0x94, 0x31, 0xe5, 0xe9, 0x0e, 0xf2, 0x10, 0xb1, 0x6a, 0xa5, 0xb1, 0x2b, 0x51,
	0xa6, 0xf9, 0x42, 0xd9, 0x1d, 0x07, 0x79, 0x3d, 0x62, 0xd5, 0x8a, 0xb4, 0x5f, 0xc0, 0xae, 0x48,
	0x97, 0xec, 0x34, 0xa7, 0x39, 0xaf, 0x54, 0xc4, 0x50, 0xf4, 0x9e, 0x54, 0x43, 0x29, 0x1e, 0xd3,
	0xcc, 0x25, 0xa0, 0xcb, 0x2d, 0xf1, 0x0e, 0x98, 0x47, 0xe1, 0xfb, 0x70, 0x76, 0x12, 0xda, 0x2d,
	0xdc, 0x05, 0x3d, 0x3c, 0x9a, 0x4e, 0x6d, 0x24, 0xa7, 0xd1, 0x6c, 0x36, 0xb5, 0xdb, 0xd8, 0x04,
	0x6d, 0x12, 0xce, 0x6d, 0x0d, 0x03, 0x18, 0xe3, 0xd9, 0xd1, 0x68, 0x7a, 0x68, 0xeb, 0x72, 0xfe,
	0x38, 0x27, 0x93, 0xf0, 0x9d, 0xdd, 0x91, 0xd1, 0xf9, 0xe4, 0xc3, 0xa1, 0x6d, 0xb8, 0x21, 0x74,
	0x54, 0x09, 0x18, 0x83, 0x5e, 0x50, 0x71, 0xde, 0x47, 0x8e, 0xe6, 0x59, 0x44, 0xcd, 0xf8, 0x25,
	0x74, 0xd6, 0xb2, 0x1c, 0xd5, 0xc2, 0x4e, 0xf0, 0xe8, 0xce, 0xe6, 0x46, 0xfa, 0xd5, 0xcf, 0xe7,
	0x2d, 0x52, 0x27, 0xdd, 0xaf, 0x08, 0xba, 0x63, 0x1e, 0xaf, 0x96, 0x2c, 0x17, 0x78, 0x17, 0xda,
	0x69, 0xa2, 0x6a, 0xef, 0x91, 0x76, 0x9a, 0xc8, 0x16, 0x36, 0xcf, 0x54, 0x50, 0x8d, 0x58, 0xb7,
	0x4f, 0x94, 0xbd, 0x97, 0xf4, 0xe2, 0x34, 0xa1, 0x82, 0xaa, 0x76, 0x7b, 0xc4, 0x2c, 0xe9, 0xc5,
	0x98, 0x0a, 0x8a, 0x7d, 0x30, 0xce, 0xe4, 0x2f, 0x56, 0x7d, 0xdd, 0xd1, 0xbc, 0x9d, 0xc0, 0xfe,
	0x77, 0x95, 0x66, 0x8b, 0x26, 0xe5, 0x7e, 0x02, 0xeb, 0x66, 0x8b, 0x0a, 0x3f, 0x05, 0x2b, 0xa7,
	0x4b, 0x56, 0x15, 0x34, 0x66, 0xcd, 0x36, 0x1b, 0x01, 0xef, 0x83, 0x9e, 0xf0, 0x58, 0xae, 0x23,
	0xc1, 0x0f, 0xb6, 0xc0, 0x37, 0x84, 0x86, 0xad, 0x62, 0xee, 0x7d, 0xb8, 0x77, 0x52, 0xa6, 0x82,
	0x11, 0x56, 0x15, 0x3c, 0xaf, 0x58, 0x30, 0x06, 0xb3, 0xf9, 0x67, 0xe3, 0x37, 0xd0, 0x51, 0x1e,
	0x7e, 0x78, 0x07, 0xa5, 0xda, 0xeb, 0x6f, 0xa9, 0x7f, 0x31, 0xdc, 0xd6, 0x68, 0x72, 0x75, 0x3d,
	0x40, 0x3f, 0xae, 0x07, 0xe8, 0xd7, 0xf5, 0x00, 0x7d, 0xfb, 0x3d, 0x68, 0x7d, 0x7e, 0xfd, 0x9f,
	0x5f, 0x51, 0x64, 0x28, 0xe1, 0xd5, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x79, 0xfc, 0x9b, 0xfe,
	0x87, 0x03, 0x00, 0x00,
}
